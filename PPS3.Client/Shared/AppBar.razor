@inject IServProducto ServProducto
@inject IServCarroCompra ServCarro
@inject IServDetalleCarroCompra ServDetalleCarro
@inject NavigationManager NavigationManager
@inject IJSRuntime JS /*JS Interop*/
@inject ISnackbar Snackbar /*Servicio para las notificaciones*/

<MudAppBar Elevation="3">
    <AuthorizeView Roles="1, 2">
        <Authorized>
            @*<MudIconButton Icon="@Icons.Material.Filled.Menu"
                           Color="Color.Inherit" Edge="Edge.Start"
                           OnClick="async ()=> await OnSidebarToggled.InvokeAsync()"/>*@
            <MudIconButton Icon="@iconoIzquierdo"
                           Color="Color.Inherit" Edge="Edge.Start"
                           OnClick="CambiarEstadoIz"/>
        </Authorized>

        <NotAuthorized>
            <a href="/">
                <MudAvatar Color="Color.Transparent" Size="Size.Large" Image="images/expo_ceramicas_logo.png" />
           </a>
           <MudText Typo="Typo.h5" Color="Color.Default" Style="margin-top:10px; margin-left:15px;">Expo Cerámicas</MudText>
        </NotAuthorized>
    </AuthorizeView>

    <MudSpacer/>

    <MudPaper Width="25em;">
        <EditForm Model="@ValorBuscado" OnValidSubmit="Buscar">
            <MudTextField @bind-Value="@ValorBuscado" Label="Buscar Producto" Variant="Variant.Text" Adornment="Adornment.End" AdornmentIcon="@Icons.Filled.Search" />
        </EditForm>        
    </MudPaper>

    <MudSpacer/>

    <AuthorizeView>
        <Authorized>
            <input type="hidden" id="UsAct" value="@context.User.Claims.First().Value" />

            <MudBadge Content="@BadgeContent" Color="Color.Transparent" Overlap="true" Bordered="true" Class="mx-6 my-4">
                <MudButton StartIcon="@Icons.Material.Filled.ShoppingCart" Color="Color.Info" Variant="Variant.Filled" OnClick="VerCarro">Carro</MudButton>
            </MudBadge>   

            <MudMenu ActivationEvent="@MouseEvent.MouseOver" AnchorOrigin="Origin.BottomCenter" TransformOrigin="Origin.TopRight">
                <ActivatorContent>
                    <MudChip Icon="@Icons.Material.Filled.Person" Color="Color.Primary">@context.User.Identity.Name</MudChip>
                </ActivatorContent>
                <ChildContent>
                    <MudMenuItem Href="/verPerfil">Perfil</MudMenuItem>
                    <MudMenuItem OnClick="VerCompras">Compras</MudMenuItem>
                    <MudMenuItem OnClick="async ()=> await Logout.InvokeAsync()">Salir</MudMenuItem>
                </ChildContent>
            </MudMenu>

        </Authorized>
        <NotAuthorized>
            <input type="hidden" id="UsAct" value="0" />

            <MudButton Class="mr-2" Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Login" 
                        Color="Color.Success" OnClick="async ()=> await Login.InvokeAsync()">Iniciar Sesión</MudButton>             
            <MudButton Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.AppRegistration" 
            Color="Color.Info" OnClick="async ()=> await Register.InvokeAsync()">Registrarse</MudButton> 
        </NotAuthorized>
    </AuthorizeView>

    @*<MudIconButton Icon="@Icons.Material.Filled.Menu" 
                    Color="Color.Inherit" Edge="Edge.End" 
                    OnClick="async ()=> await OnRightSidebarToggled.InvokeAsync()" />*@
    <MudIconButton Icon="@iconoDerecho"
                   Color="Color.Inherit" Edge="Edge.End"
                   OnClick="CambiarEstadoDer" />
</MudAppBar>

@code {
    [Parameter]
    public EventCallback OnSidebarToggled { get; set; }

    [Parameter]
    public EventCallback OnRightSidebarToggled { get; set; }

    [Parameter]
    public EventCallback Login { get; set; }

    [Parameter]
    public EventCallback Logout { get; set; }

    [Parameter]
    public EventCallback Register { get; set; }

    public int BadgeContent { get; set; } = 0;

    private int idUsAct = 0;

    private bool abiertoIzquierdo = false;
    private bool abiertoDerecho = false;
    private string iconoIzquierdo = Icons.Material.Filled.Menu;
    private string iconoDerecho = Icons.Material.Filled.Menu;

    /*PARA EL BUSCADOR*/
    private string ValorBuscado = string.Empty;

    private void Buscar()
    {
        if(!string.IsNullOrEmpty(ValorBuscado.Trim()))
            NavigationManager.NavigateTo($"/productosEnCategoria/{ValorBuscado.Trim()}", true);
        else
            NavigationManager.NavigateTo($"/", true);
    }

    private void VerCompras() => NavigationManager.NavigateTo($"/verCompras");

    protected override async Task OnAfterRenderAsync(bool firstRender){ await ProductosCarro(); }

    private async Task CambiarEstadoIz()
    {        
        await OnSidebarToggled.InvokeAsync();

        if(!abiertoIzquierdo)
        {
            abiertoIzquierdo = true;
            iconoIzquierdo = Icons.Material.Filled.ArrowBack;
        }
        else
        {
            abiertoIzquierdo = false;
            iconoIzquierdo = Icons.Material.Filled.Menu;
        }
        StateHasChanged();
    }

    private async Task CambiarEstadoDer()
    {
        await OnRightSidebarToggled.InvokeAsync();

        if (!abiertoDerecho)
        {
            abiertoDerecho = true;
            iconoDerecho = Icons.Material.Filled.ArrowForward;
        }
        else
        {
            abiertoDerecho = false;
            iconoDerecho = Icons.Material.Filled.Menu;
        }
        StateHasChanged();
    }

    private async Task VerCarro()
    {
        var idUsuario = Convert.ToInt32(await JS.InvokeAsync<string>("getUserId"));

        if(idUsuario > 0)
        {
            CarroCompra carro = await ServCarro.ObtenerCarroActivoUsuario(idUsuario);
            if (carro != null)
                NavigationManager.NavigateTo($"/verCarro/{carro.IdCarro}");
            else
                Snackbar.Add($"No se puede acceder al carro.", Severity.Error);
        }
        else
            Snackbar.Add($"No se puede acceder al usuario.", Severity.Error);
    }

    private async Task ProductosCarro()
    {
        try { idUsAct = Convert.ToInt32(await JS.InvokeAsync<string>("getUserId")); }
        catch (Exception) { idUsAct = 0; }

        if(idUsAct > 0)
        {
            CarroCompra carro = await ServCarro.ObtenerCarroActivoUsuario(idUsAct);
            if (carro != null)
            {
                IEnumerable<DetalleCarroCompra> detalles = await ServDetalleCarro.ObtenerDetallesCarro(carro.IdCarro);
                if(detalles != null)
                {
                    BadgeContent = detalles.Count();
                    //StateHasChanged();
                }                
            }        
        }              
    }
}
