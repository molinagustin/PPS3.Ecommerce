@inherits LayoutComponentBase
@inject NavigationManager NavigationManager
@inject IServUsuario ServUsuario
@inject AuthenticationStateProvider AuthStateProvider

<PageTitle>Expo Ceramicas</PageTitle>

<MudLayout>    
    <AppBar OnSidebarToggled="ToggleSideBar" OnRightSidebarToggled="ToggleRightSideBar" Login="Login" Logout="LogoutUser" Register="Register"/>

    <AuthorizeView Roles="1, 2">
        <NavMenu SideBarOpen = "@_openSideBar"></NavMenu>
    </AuthorizeView>

    <RightNavMenu SideBarOpen="@_openRightSideBar"/>

    <BottomAppBar Contacto="ContactPage"/>

    <MudMainContent Class="pt-16 px-16">
        <MudContainer Class="mt-16 mb-16 mud-container-maxwidth-xl">
            @Body
        </MudContainer>
    </MudMainContent>
</MudLayout>

<MudThemeProvider/> @*Componente esencial para renderizar y obtener funcionalidades de MudBlazor*@
<MudDialogProvider/> @*Componente opcional que sirve para los menu de dialogo*@
<MudSnackbarProvider/> @*Componente opcional que sirve para utilizar las notificaciones SnackBar *@

@code{
    //Variable para determinar si se muestra o no la barra lateral
    private bool _openSideBar = false;
    private bool _openRightSideBar = false;

    //Metodo para cambiar el estado de la variable simplemente y mostrar o no la barra lateral en codigo
    private void ToggleSideBar() => _openSideBar = !_openSideBar;
    private void ToggleRightSideBar() => _openRightSideBar = !_openRightSideBar;

    private async Task LogoutUser()
    {
        var result = await ServUsuario.Logout();

        if (result)
        {
            await AuthStateProvider.GetAuthenticationStateAsync();
            StateHasChanged();
            NavigationManager.NavigateTo("/", true);    
        }        
    }

    private void Login() => NavigationManager.NavigateTo("/login"); 

    private void Register() => NavigationManager.NavigateTo("/registro"); 

    private void ContactPage() => NavigationManager.NavigateTo("/contacto");
}