@page "/detallesProducto"
@page "/detallesProducto/{id:int}"
@inject IServProducto ServProducto
@inject IServRubro ServRubro
@inject IServTipoProducto ServTipoProd
@inject IServProveedor ServProv
@inject IServUnidadMedida ServUnidadMed
@inject NavigationManager NavigationManager
@inject ISnackbar Snackbar /*Servicio para las notificaciones*/
@inject IJSRuntime JS /*JS Interop*/
@inject IDialogService DialogService
@attribute [Authorize(Roles = "1, 2")]

<AuthorizeView Context="usCont">
    <input type="hidden" id="UsAct" value="@usCont.User.Claims.First().Value" />
</AuthorizeView>

<MudText Align="Align.Center" Typo="Typo.h5" Style="margin-bottom:30px;">Detalles de Producto</MudText>

<EditForm Model="@producto" OnValidSubmit="GuardarProducto" Context="conForm">
    <DataAnnotationsValidator/>
    <MudGrid Justify="Justify.Center">
        <MudItem xs="3">
            <br />
        </MudItem>
        <MudItem xs="6">
            <MudCard Elevation="1">
                <MudCardHeader>
                    <CardHeaderContent>
                        <MudText Typo="Typo.h6" Align="Align.Center" Color="Color.Primary">Datos del Producto</MudText>
                    </CardHeaderContent>
                </MudCardHeader>
                <MudCardContent>
                    <MudTextField Label="Nombre del Producto" HelperText="Nombre Visible" @bind-Value="producto.NombreProd" For="@(() => producto.NombreProd)" AutoFocus = "true" Required="true"/>
                
                    <MudTextField Label="Descripcion del Producto" HelperText="Detalles para mejor entendimiento" @bind-Value="producto.Descripcion" For="@(() => producto.Descripcion)" Required="true"/>
                
                    @if (rubros != null)
                    {
                        <MudSelect T="int" @bind-Value="@rub" Label="Rubro" Variant="Variant.Outlined" AnchorOrigin="Origin.BottomCenter" onchange="@(()=>FiltrarTiposProductos)">
                            @foreach(var rubro in rubros)
                            {
                                <MudSelectItem Value="@rubro.IdRubro" >@(rubros.ToList().IndexOf(rubro) + 1) - @rubro.DescRubro</MudSelectItem>
                            }
                        </MudSelect>
                    }
                    else
                    {
                        <MudProgressLinear Color="Color.Primary" Striped="true" Indeterminate="true" Class="my-1" />
                    }
                
                    @if (tiposProdsPorRubro != null && tiposProdsPorRubro.Count() > 0)
                    {
                        <MudSelect T="int" @bind-Value="@tipo" Label="Tipo de Producto" Variant="Variant.Outlined" AnchorOrigin="Origin.BottomCenter" Immediate=true>
                            @foreach (var tp in tiposProdsPorRubro)
                            {
                                <MudSelectItem Value="@tp.IdTipo">@(tiposProdsPorRubro.ToList().IndexOf(tp) + 1) - @tp.DescripcionTipo</MudSelectItem>
                            }
                        </MudSelect>
                    }
                    else
                    {
                        tipo = 9999;
                        <MudText Align="Align.Center" Color="Color.Info" Typo="Typo.body1">Sin Tipos de Productos</MudText>
                        @*<MudProgressLinear Color="Color.Primary" Striped="true" Indeterminate="true" Class="my-1" />*@
                    }

                    <MudTextField Label="Precio de Costo" HelperText="Sin los adicionales. Formato 999,99 ó 999" @bind-Value="producto.PrecioCosto" For="@(() => producto.PrecioCosto)" Required="true"/>

                    <MudTextField Label="Precio Final" HelperText="El precio a la venta. Formato 999,99 ó 999" @bind-Value="producto.PrecioFinal" For="@(() => producto.PrecioFinal)" Required="true"/>

                    @if (provs != null)
                    {
                        <MudSelect T="int" @bind-Value="@prov" Label="Proveedor" Variant="Variant.Outlined" AnchorOrigin="Origin.BottomCenter">
                            @foreach(var pv in provs)
                            {
                                <MudSelectItem Value="@pv.IdProveedor">@(provs.ToList().IndexOf(pv) + 1) - @pv.NombreProv</MudSelectItem>
                            }
                        </MudSelect>
                    }
                    else
                    {
                        <MudProgressLinear Color="Color.Primary" Striped="true" Indeterminate="true" Class="my-1" />
                    }

                    @if (unids != null)
                    {
                        <MudSelect T="int" @bind-Value="@uni" Label="Unidad de Medida" Variant="Variant.Outlined" AnchorOrigin="Origin.BottomCenter">
                            @foreach(var um in unids)
                            {
                                <MudSelectItem Value="@um.IdUnidad">@(unids.ToList().IndexOf(um) + 1) - @um.DescripcionUnidad</MudSelectItem>
                            }
                        </MudSelect>
                    }
                    else
                    {
                        <MudProgressLinear Color="Color.Primary" Striped="true" Indeterminate="true" Class="my-1" />
                    }

                    @*<MudTextField Label="Cantidad Minima para Alerta" HelperText="El valor que se tomara para avisar de poco stock. Formato 999,99 ó 999" @bind-Value="producto.CantMinAlerta" For="@(() => producto.CantMinAlerta)"/>*@

                    <MudTextField Label="Stock en Existencia" HelperText="Productos que quedan. Formato 999,99 ó 999" @bind-Value="producto.StockExistencia" For="@(() => producto.StockExistencia)"/>

                    @if(id > 0)
                    {
                        <MudSwitch @bind-Checked="producto.Activo" Label="Producto Activo" Color="Color.Success"/>
                    }          
                    
                </MudCardContent>
                <MudCardActions>
                    <MudButton FullWidth="true" StartIcon="@Icons.Material.Filled.Save" Color="Color.Success" ButtonType="ButtonType.Submit">Guardar</MudButton>
                    <MudDivider/>
                    <MudButton FullWidth="true" StartIcon="@Icons.Material.Filled.ExitToApp" Color="Color.Error" OnClick="Cancelar">Cancelar</MudButton>
                </MudCardActions>
            </MudCard>
        </MudItem>

        <MudItem xs="3">
            @if (id > 0)
            {   @*Si es un producto ya creado, recien ahi muestro sus imagenes*@
                <MudButton StartIcon="@Icons.Material.Filled.Image" Color="Color.Primary" Variant="Variant.Outlined" OnClick="VerImagenes" Size="Size.Large">IMAGENES</MudButton>
            }
        </MudItem>
    </MudGrid>        
</EditForm>

@code {
    //Parametro que se recibe por URL para una consulta del objeto
    [Parameter]
    public int id { get; set; }

    //Para almacenar el ID del usuario actual
    private int idUsAct;

    //El producto que estara vinculado al formulario
    Producto producto = new Producto();

    //Objetos para los CBO
    private IEnumerable<Rubro> rubros;
    private IEnumerable<TipoProducto> tiposProds;
    private IEnumerable<TipoProducto> tiposProdsPorRubro = new List<TipoProducto>();
    private IEnumerable<Proveedor> provs;
    private IEnumerable<UnidadMedida> unids;

    //Objetos para guardar los valores
    private int rub = 1;
    private int tipo = 9999;
    private int prov = 1;
    private int uni = 1;

    private string titulo = "Creacion de Nuevo Producto";

    //Se verifica si el formulario sera de insercion o de modificacion
    protected override async Task OnInitializedAsync()
    {
        //Obtengo los elementos para los CBO
        rubros = await ServRubro.ObtenerRubros();
        tiposProds = await ServTipoProd.ObtenerTiposProd();
        provs = await ServProv.ObtenerProveedores();
        unids = await ServUnidadMed.ObtenerUnidades();
        if(rubros != null)
            rub = rubros.FirstOrDefault().IdRubro;

        if(id > 0)
        {
            //Obtengo el producto y dejo definidos sus parametros
            producto = await ServProducto.ObtenerProducto(id);
            rub = producto.Rubro;
            tipo = producto.TipoProd;
            prov = producto.Proveedor;
            uni = producto.UnidadMedida;
            titulo = "Modificacion de Producto";            
        }  
        FiltrarTiposProductos();
    }

    //Guardo el ID del usuario actual
    protected override async Task OnAfterRenderAsync(bool firstRender) => idUsAct = Convert.ToInt32(await JS.InvokeAsync<string>("getUserId"));

    //A traves de un metodo se va a guardar los cambios del producto
    protected async Task GuardarProducto()
    {
        if(tiposProdsPorRubro != null && tiposProdsPorRubro.Count() > 0 && tipo != 9999)
        {
            //Asigno valores por si se cambiaron desde los CBO
            producto.Rubro = rub;
            producto.TipoProd = tipo;
            producto.Proveedor = prov;
            producto.UnidadMedida = uni;

            if (producto.IdProducto > 0)
                producto.UsuarioModif = idUsAct;
            else
            {
                producto.UsuarioCrea = idUsAct;
                producto.UsuarioModif = idUsAct;
            }

            if (producto.StockExistencia == 0 && (producto.PrecioCosto == 0 || producto.PrecioFinal == 0))
            {
                var resultDialog = await DialogService.ShowMessageBox(
                    "¡Atencion!",
                    "Esta por crear un producto con stock = 0 y precio = 0. ¿Desea continuar?",
                    yesText: "Continuar", cancelText: "Cancelar");

                if (resultDialog == true)
                    await GuardandoRegistro();
                else
                    Snackbar.Add($"Se cancela la accion", Severity.Info);
            }
            else if(producto.StockExistencia == 0)
            {
                var resultDialog = await DialogService.ShowMessageBox(
                    "¡Atencion!",
                    "Esta por crear un producto con stock = 0. ¿Desea continuar?",
                    yesText: "Continuar", cancelText: "Cancelar");

                if (resultDialog == true)
                    await GuardandoRegistro();
                else
                    Snackbar.Add($"Se cancela la accion", Severity.Info);
            }
            else if (producto.PrecioCosto == 0 || producto.PrecioFinal == 0)
            {
                var resultDialog = await DialogService.ShowMessageBox(
                    "¡Atencion!",
                    "Esta por crear un producto con precio = 0. ¿Desea continuar?",
                    yesText: "Continuar", cancelText: "Cancelar");

                if (resultDialog == true)
                    await GuardandoRegistro();
                else
                    Snackbar.Add($"Se cancela la accion", Severity.Info);
            }
            else
                await GuardandoRegistro();            
        }
        else
            Snackbar.Add($"Debe seleccionar un tipo de producto valido", Severity.Warning);       
    }


    protected void FiltrarTiposProductos()
    {
        tiposProdsPorRubro = null;
        tiposProdsPorRubro = tiposProds.Where(t => t.Rubro == rub).Where(t=> t.Activo = true);
        if (tiposProdsPorRubro != null && tiposProdsPorRubro.Count() > 0)
        {
            tipo = 9999;
            tipo = tiposProdsPorRubro.First().IdTipo;
        }            
    }

    private async Task GuardandoRegistro()
    {
        //Se llama al servicio para guardar
        var result = await ServProducto.GuardarProducto(producto);

        if (result)
        {
            if (id > 0)
            {
                //Se redirige hacia el listado de productos
                NavigationManager.NavigateTo("/listaProductos");
                Snackbar.Add($"Producto modificado de forma exitosa", Severity.Success);
            }
            else
            {
                var idUltimoProducto = await ServProducto.UltimoProductoCreado(idUsAct);
                if (idUltimoProducto > 0)
                {
                    //Se redirige hacia las imagenes del producto
                    NavigationManager.NavigateTo($"/detallesProducto/imagenes/{idUltimoProducto}");
                    Snackbar.Add($"Producto agregado de forma exitosa", Severity.Success);
                }
                else
                {
                    NavigationManager.NavigateTo("/listaProductos");
                    Snackbar.Add($"Producto agregado de forma exitosa", Severity.Success);
                }
            }
        }
        else
            Snackbar.Add($"No se pudo crear/modificar el producto", Severity.Error);
    }
    
    protected void Cancelar() => NavigationManager.NavigateTo("/listaProductos");

    protected void VerImagenes() => NavigationManager.NavigateTo($"/detallesProducto/imagenes/{id}");
}
