@page "/detallesProducto"
@page "/detallesProducto/{id:int}"
@inject IServProducto ServProducto
@inject IServRubro ServRubro
@inject IServTipoProducto ServTipoProd
@inject IServProveedor ServProv
@inject IServUnidadMedida ServUnidadMed
@inject NavigationManager NavigationManager
@inject ISnackbar Snackbar /*Servicio para las notificaciones*/
@inject IJSRuntime JS /*JS Interop*/
@inject IDialogService DialogService
@attribute [Authorize(Roles = "1, 2")]

<AuthorizeView Context="usCont">
    <input type="hidden" id="UsAct" value="@usCont.User.Claims.First().Value" />
</AuthorizeView>

<MudText Align="Align.Center" Typo="Typo.h5" Style="margin-bottom:30px;">@titulo</MudText>

<EditForm Model="@producto" OnValidSubmit="GuardarProducto" Context="conForm">
    <DataAnnotationsValidator/>
    <MudGrid Justify="Justify.Center">
        <MudItem xs="3">
            <br />
        </MudItem>
        <MudItem xs="6">
            <MudCard Elevation="1">
                <MudCardHeader>
                    <CardHeaderContent>
                        <MudText Typo="Typo.h6" Align="Align.Center" Color="Color.Primary">Datos del Producto</MudText>
                    </CardHeaderContent>
                </MudCardHeader>
                <MudCardContent>
                    <MudTextField Label="Nombre del Producto" HelperText="Nombre Visible" @bind-Value="producto.NombreProd" For="@(() => producto.NombreProd)" AutoFocus = "true" Required="true"/>
                
                    <MudTextField Label="Descripción del Producto" HelperText="Detalles para mejor comprensión" @bind-Value="producto.Descripcion" For="@(() => producto.Descripcion)" Required="true"/>
                
                    @if (rubros != null)
                    {
                        <MudSelect T="int" @bind-Value="@rub" Label="Rubro" Variant="Variant.Outlined" AnchorOrigin="Origin.BottomCenter" SelectedValuesChanged="FiltrarTiposProductos">
                            @foreach(var rubro in rubros)
                            {
                                <MudSelectItem Value="@rubro.IdRubro" >@(rubros.ToList().IndexOf(rubro) + 1) - @rubro.DescRubro</MudSelectItem>
                            }
                        </MudSelect>
                    }
                    else
                    {
                        <MudProgressLinear Color="Color.Primary" Striped="true" Indeterminate="true" Class="my-1" />
                    }
                
                    @if (tiposProdsPorRubro != null)
                    {
                        @if(tiposProdsPorRubro.Count() > 0)
                        {
                            <MudSelect T="int" @bind-Value="@tipo" Label="Tipo de Producto" Variant="Variant.Outlined" AnchorOrigin="Origin.BottomCenter" Immediate=true>
                                @foreach (var tp in tiposProdsPorRubro)
                                {
                                    <MudSelectItem Value="@tp.IdTipo">@(tiposProdsPorRubro.ToList().IndexOf(tp) + 1) - @tp.DescripcionTipo</MudSelectItem>
                                }
                            </MudSelect>
                        }
                        else
                        {
                            <MudText Align="Align.Center" Color="Color.Error" Typo="Typo.body1">Sin Tipos de Productos</MudText>
                        }
                    }
                    else
                    {         
                        <MudProgressLinear Color="Color.Primary" Striped="true" Indeterminate="true" Class="my-1" />
                    }

                    <label for="costo">Precio Costo (Precio sin ganancia)</label>
                    <input @bind-value="strPCosto" @onkeydown="ProcessKeyPress" @onkeydown:preventDefault class="form-control" required="true" @onblur="@(() => Procesar(1, ref strPCosto))" @onfocus="@(() => CheckValor(1))" name="costo">

                    <label for="final">Precio Final (Precio a la venta)</label>
                    <input @bind-value="strPFinal" @onkeydown="ProcessKeyPress" @onkeydown:preventDefault class="form-control" required="true" @onblur="@(() => Procesar(2, ref strPFinal))" @onfocus="@(() => CheckValor(2))" name="final">

                    @*<MudTextField Label="Precio de Costo" HelperText="Sin los adicionales. Formato 999,99 ó 999" @bind-Value="producto.PrecioCosto" For="@(() => producto.PrecioCosto)" Required="true"/>*@

                    @*<MudTextField Label="Precio Final" HelperText="El precio a la venta. Formato 999,99 ó 999" @bind-Value="producto.PrecioFinal" For="@(() => producto.PrecioFinal)" Required="true"/>*@

                    @if (id > 0)
                    {
                        <label for="bonif">Bonificación (%)</label>
                        <input @bind-value="strBonif" @onkeydown="ProcessKeyPress" @onkeydown:preventDefault class="form-control" required="true" @onblur="@(() => Procesar(4, ref strBonif))" @onfocus="@(() => CheckValor(4))" name="bonif">
                    }

                    @if (provs != null)
                    {
                        if(provs.Count() > 0)
                        {
                            <MudSelect T="int" @bind-Value="@prov" Label="Proveedor" Variant="Variant.Outlined" AnchorOrigin="Origin.BottomCenter">
                                @foreach(var pv in provs)
                                {
                                    <MudSelectItem Value="@pv.IdProveedor">@(provs.ToList().IndexOf(pv) + 1) - @pv.NombreProv</MudSelectItem>
                                }
                            </MudSelect>                            
                        }
                        else
                        {
                            <MudText Typo="Typo.body1" Align="Align.Center" Color="Color.Error">Sin Proveedores Para Seleccionar</MudText>
                        }
                    }
                    else
                    {
                        <MudProgressLinear Color="Color.Primary" Striped="true" Indeterminate="true" Class="my-1" />
                    }

                    @if (unids != null)
                    {
                        <MudSelect T="int" @bind-Value="@uni" Label="Unidad de Medida" Variant="Variant.Outlined" AnchorOrigin="Origin.BottomCenter">
                            @foreach(var um in unids)
                            {
                                <MudSelectItem Value="@um.IdUnidad">@(unids.ToList().IndexOf(um) + 1) - @um.DescripcionUnidad</MudSelectItem>
                            }
                        </MudSelect>
                    }
                    else
                    {
                        <MudProgressLinear Color="Color.Primary" Striped="true" Indeterminate="true" Class="my-1" />
                    }

                    @*<MudTextField Label="Cantidad Minima para Alerta" HelperText="El valor que se tomara para avisar de poco stock. Formato 999,99 ó 999" @bind-Value="producto.CantMinAlerta" For="@(() => producto.CantMinAlerta)"/>*@

                    <label for="stock">Stock Existente</label>
                    <input @bind-value="strStock" @onkeydown="ProcessKeyPress" @onkeydown:preventDefault class="form-control" required="true" @onblur="@(() => Procesar(3, ref strStock))" @onfocus="@(() => CheckValor(3))" name="stock">

                    @*<MudTextField Label="Stock en Existencia" HelperText="Productos que quedan. Formato 999,99 ó 999" @bind-Value="producto.StockExistencia" For="@(() => producto.StockExistencia)"/>*@

                    @if(id > 0)
                    {
                        <MudSwitch @bind-Checked="producto.Activo" Label="Producto Activo" Color="Color.Success"/>
                    }          
                    
                </MudCardContent>
                <MudCardActions>
                    <MudButton FullWidth="true" StartIcon="@Icons.Material.Filled.Save" Color="Color.Success" ButtonType="ButtonType.Submit">Guardar</MudButton>
                    <MudDivider/>
                    <MudButton FullWidth="true" StartIcon="@Icons.Material.Filled.ExitToApp" Color="Color.Error" OnClick="Cancelar">Cancelar</MudButton>
                </MudCardActions>
            </MudCard>
        </MudItem>

        <MudItem xs="3">
            @if (id > 0)
            {   @*Si es un producto ya creado, recien ahi muestro sus imagenes*@
                <MudButton StartIcon="@Icons.Material.Filled.Image" Color="Color.Primary" Variant="Variant.Outlined" OnClick="VerImagenes" Size="Size.Large">IMÁGENES</MudButton>
            }
        </MudItem>
    </MudGrid>        
</EditForm>

@code {
    //Parametro que se recibe por URL para una consulta del objeto
    [Parameter]
    public int id { get; set; }

    //Para almacenar el ID del usuario actual
    private int idUsAct;

    //El producto que estara vinculado al formulario
    Producto producto = new Producto();

    //Objetos para los CBO
    private IEnumerable<Rubro> rubros;
    private IEnumerable<TipoProducto> tiposProds;
    private IEnumerable<TipoProducto> tiposProdsPorRubro = new List<TipoProducto>();
    private IEnumerable<Proveedor> provs;
    private IEnumerable<UnidadMedida> unids;

    //Objetos para guardar los valores
    private int rub = 1;
    private int tipo = 9999;
    private int prov = 1;
    private int uni = 1;

    private bool estadoActivoInicial = false;

    private string titulo = "Creación de Producto";

    private string strBonif = "0";
    private decimal bonificacion = 0;
    private string strPCosto = "0";
    private decimal precioCosto = 0;
    private string strPFinal = "0";
    private decimal precioFinal = 0;
    private string strStock = "0";
    private decimal stock = 0;
    private int focusControl = 0;
    private bool firstStart = true;

    //Se verifica si el formulario sera de insercion o de modificacion
    protected override async Task OnInitializedAsync()
    {
        //Obtengo los elementos para los CBO
        rubros = await ServRubro.ObtenerRubros();
        tiposProds = await ServTipoProd.ObtenerTiposProd();
        provs = await ServProv.ObtenerProveedores();
        unids = await ServUnidadMed.ObtenerUnidades();
        if(rubros != null)
            rub = rubros.FirstOrDefault().IdRubro;

        if(id > 0)
        {
            //Obtengo el producto y dejo definidos sus parametros
            producto = await ServProducto.ObtenerProducto(id);
            rub = producto.Rubro;
            tipo = producto.TipoProd;
            prov = producto.Proveedor;
            uni = producto.UnidadMedida;
            estadoActivoInicial = producto.Activo;
            bonificacion = producto.Bonificacion;
            precioCosto = producto.PrecioCosto;
            precioFinal = producto.PrecioFinal;
            stock = producto.StockExistencia;
            strBonif = bonificacion.ToString();
            strPCosto = precioCosto.ToString();
            strPFinal = precioFinal.ToString();
            strStock = stock.ToString();
            titulo = "Modificación de Producto";            
        }  
        FiltrarTiposProductos();
    }

    //Guardo el ID del usuario actual
    protected override async Task OnAfterRenderAsync(bool firstRender) => idUsAct = Convert.ToInt32(await JS.InvokeAsync<string>("getUserId"));


    private void Procesar(int tipo, ref string strProces)
    {
        if (string.IsNullOrEmpty(strProces.Trim())) strProces = "0";
        if (strProces.Trim().StartsWith(',')) strProces = "0" + strProces;
        if (strProces.Contains(','))
        {
            var index = strProces.IndexOf(',');
            try { strProces = strProces.Substring(0, index + 3); }
            catch (Exception) { strProces = strProces.Remove(index); }
        }

        //1-Precio Costo 2-Precio Final 3-Bonificacion 4-Stock
        switch (tipo)
        {            
            case 1:
                precioCosto = Convert.ToDecimal(strProces);
                strProces = precioCosto.ToString();
                break;

            case 2:
                precioFinal = Convert.ToDecimal(strProces);
                strProces = precioFinal.ToString();
                break;

            case 3:
                stock = Convert.ToDecimal(strProces);
                strProces = stock.ToString();
                break;

            case 4:                
                bonificacion = Convert.ToDecimal(strProces);
                strProces = bonificacion.ToString();
                if(bonificacion > 100)
                {
                    strProces = "100";
                    bonificacion = 100;
                }
                break;
        }

    }

    private static bool IsNumeric(string caracter)
    {
        int result;
        return int.TryParse(caracter, out result);
    }

    //Declaro una pila (ultimo en entrar primero en salir) Dejo la pila o cola porque es mas facil acceder a los elementos
    private Queue<Object> dato = new();

    private void ProcessKeyPress(KeyboardEventArgs e)
    {
        switch (focusControl)
        {
            case 1:
                ProcesoUnitario(ref strPCosto);
                break;

            case 2:
                ProcesoUnitario(ref strPFinal);
                break;

            case 3:
                ProcesoUnitario(ref strStock);
                break;

            case 4:
                ProcesoUnitario(ref strBonif);
                break;
        }

        void ProcesoUnitario(ref string str)
        {
            dato.Clear();
            var back = false;
            foreach (var c in str)
                dato.Enqueue(c.ToString());

            switch (e.Key)
            {
                case ".":
                    if (!dato.Contains(","))
                        dato.Enqueue(",");
                    break;
                case ",":
                    if (!dato.Contains(","))
                        dato.Enqueue(",");
                    break;
                default:
                    if (IsNumeric(e.Key))
                        dato.Enqueue(e.Key);
                    if (e.Code == "Backspace" && dato.Count() > 0)
                        back = true;
                    break;
            }
            str = "";
            var can = back ? dato.Count - 1 : dato.Count;
            while (can > 0)
            {
                can--;
                str += dato.Dequeue();
            }
        }
    }

    private void CheckValor(int focus)
    {
        focusControl = focus;

        switch (focusControl)
        {
            case 1:
                if (strPCosto == "0" || strPCosto == "0,00") strPCosto = "";
                break;

            case 2:
                if (strPFinal == "0" || strPFinal == "0,00") strPFinal = "";
                break;

            case 3:
                if (strStock == "0" || strStock == "0,00") strStock = "";
                break;

            case 4:
                if (strBonif == "0" || strBonif == "0,00") strBonif = "";
                break;
        }
    }

    //A traves de un metodo se va a guardar los cambios del producto
    protected async Task GuardarProducto()
    {
        producto.PrecioCosto = precioCosto;
        producto.PrecioFinal = precioFinal;
        producto.Bonificacion = bonificacion;
        producto.StockExistencia = stock;

        if(tiposProdsPorRubro != null && tiposProdsPorRubro.Count() > 0 && tipo != 9999)
        {
            //Asigno valores por si se cambiaron desde los CBO
            producto.Rubro = rub;
            producto.TipoProd = tipo;
            producto.Proveedor = prov;
            producto.UnidadMedida = uni;

            if (producto.IdProducto > 0)
                producto.UsuarioModif = idUsAct;
            else
            {
                producto.UsuarioCrea = idUsAct;
                producto.UsuarioModif = idUsAct;
            }

            //Voy a emitir una alerta si llego a querer dar de baja un producto con stock
            if (producto.StockExistencia > 0 && (estadoActivoInicial != producto.Activo) && estadoActivoInicial)
            {
                var resultDialog = await DialogService.ShowMessageBox(
                       "¡Atención!",
                       "Está intentado dar de baja un producto con stock > 0. ¿Continuar?",
                       yesText: "Continuar", cancelText: "Cancelar");

                if (resultDialog == true)
                    await EmpezarGuardado();
                else
                    Snackbar.Add($"Se cancela la acción", Severity.Info);
            }
            else
                await EmpezarGuardado();

            async Task EmpezarGuardado()
            {
                if(producto.Bonificacion == 100)
                {
                    var resultDialog = await DialogService.ShowMessageBox(
                        "¡Atención!",
                        "Está por guardar un producto con una bonificación del 100%. ¿Desea continuar?",
                        yesText: "Continuar", cancelText: "Cancelar");

                    if (resultDialog == null)
                    { 
                        Snackbar.Add($"Se cancela la acción", Severity.Info);
                        return;
                    }
                }

                if (producto.StockExistencia == 0 && (producto.PrecioCosto == 0 || producto.PrecioFinal == 0))
                {
                    var resultDialog = await DialogService.ShowMessageBox(
                        "¡Atención!",
                        "Está por guardar un producto con stock = 0 y precio = 0. ¿Desea continuar?",
                        yesText: "Continuar", cancelText: "Cancelar");

                    if (resultDialog == true)
                        await GuardandoRegistro();
                    else
                        Snackbar.Add($"Se cancela la acción", Severity.Info);
                }
                else if (producto.StockExistencia == 0)
                {
                    var resultDialog = await DialogService.ShowMessageBox(
                        "¡Atención!",
                        "Está por guardar un producto con stock = 0. ¿Desea continuar?",
                        yesText: "Continuar", cancelText: "Cancelar");

                    if (resultDialog == true)
                        await GuardandoRegistro();
                    else
                        Snackbar.Add($"Se cancela la acción", Severity.Info);
                }
                else if (producto.PrecioCosto == 0 || producto.PrecioFinal == 0)
                {
                    var resultDialog = await DialogService.ShowMessageBox(
                        "¡Atención!",
                        "Está por guardar un producto con precio = 0. ¿Desea continuar?",
                        yesText: "Continuar", cancelText: "Cancelar");

                    if (resultDialog == true)
                        await GuardandoRegistro();
                    else
                        Snackbar.Add($"Se cancela la acción", Severity.Info);
                }
                else
                    await GuardandoRegistro();
            }                       
        }
        else
            Snackbar.Add($"Debe seleccionar un tipo de producto válido", Severity.Warning);       
    }


    protected void FiltrarTiposProductos()
    {
        tipo = 9999;
        tiposProdsPorRubro = new List<TipoProducto>();
        tiposProdsPorRubro = tiposProds.Where(t => t.Rubro == rub).Where(t=> t.Activo = true);
        if (tiposProdsPorRubro.Count() > 0)
        {            
            if(id > 0 && firstStart)
            {
                firstStart = false;
                tipo = producto.TipoProd;
            }
            else tipo = tiposProdsPorRubro.First().IdTipo;
            
            StateHasChanged();
        }        
    }

    private async Task GuardandoRegistro()
    {
        //Se llama al servicio para guardar
        var result = await ServProducto.GuardarProducto(producto);

        if (result)
        {
            if (id > 0)
            {
                //Se redirige hacia el listado de productos
                NavigationManager.NavigateTo("/listaProductos");
                Snackbar.Add($"Producto modificado de forma exitosa", Severity.Success);
            }
            else
            {
                var idUltimoProducto = await ServProducto.UltimoProductoCreado(idUsAct);
                if (idUltimoProducto > 0)
                {
                    //Se redirige hacia las imagenes del producto
                    NavigationManager.NavigateTo($"/detallesProducto/imagenes/{idUltimoProducto}");
                    Snackbar.Add($"Producto agregado de forma exitosa", Severity.Success);
                }
                else
                {
                    NavigationManager.NavigateTo("/listaProductos");
                    Snackbar.Add($"Producto agregado de forma exitosa", Severity.Success);
                }
            }
        }
        else
            Snackbar.Add($"No se pudo crear/modificar el producto", Severity.Error);
    }
    
    protected void Cancelar() => NavigationManager.NavigateTo("/listaProductos");

    protected void VerImagenes() => NavigationManager.NavigateTo($"/detallesProducto/imagenes/{id}");
}
