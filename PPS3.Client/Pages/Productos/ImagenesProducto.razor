@page "/detallesProducto/imagenes/{id:int}"
@inject IServImagenProducto ServImagenProducto
@inject NavigationManager NavigationManager
@inject ISnackbar Snackbar /*Servicio para las notificaciones*/
@inject IJSRuntime JS /*JS Interop*/
@attribute [Authorize(Roles = "1, 2")]

<AuthorizeView Context="usCont">
    <input type="hidden" id="UsAct" value="@usCont.User.Claims.First().Value" />
</AuthorizeView>

<MudText Align="Align.Center" Typo="Typo.h5" Style="margin-bottom:30px;">Cargar Imágenes del Producto</MudText>

<MudGrid Style="margin-bottom:30px;">
    <MudItem xs="4">
        <MudButton StartIcon="@Icons.Material.Filled.ArrowBack" Color="Color.Primary" Variant="Variant.Outlined" OnClick="Volver" Size="Size.Small">Volver</MudButton>
    </MudItem>

    <MudItem xs="4">
        <MudText Align="Align.Center" Typo="Typo.h6" Color="Color.Primary">Las imágenes seleccionadas se guardan automáticamente</MudText>
        <MudText Align="Align.Center" Typo="Typo.body1" Color="Color.Default"><b>¡Para una correcta visualización, usar imágenes de 100px x 100px máximo!</b></MudText>
        <MudGrid Justify="Justify.Center" Style="margin-top:30px;">
            <InputFile OnChange="OnInputFileChanged"/>
        </MudGrid>        
    </MudItem>
</MudGrid>

<MudText Align="Align.Center" Typo="Typo.h5" Style="margin-bottom:30px;">Imágenes Guardadas</MudText>

<MudGrid Justify="Justify.Center">
    @if (imagenes != null && imagenes.Count() > 0)
    {
        <MudStack Row="true" Style="max-width:max-content; margin-top:30px;">
            @foreach (var image in imagenes)
            {
                <MudItem>
                    <MudCard>
                        <MudCardContent>
                            <MudImage Elevation="0" ObjectFit="ObjectFit.Fill" Src="@image.UrlImagen" Style="width:250px; height:250px;" />
                        </MudCardContent>
                        <MudCardActions>
                            <MudGrid Justify="Justify.Center">
                                <MudIconButton Icon="@Icons.Material.Filled.Delete" Color="Color.Error" OnClick="@(() => BorrarImagen(image.IdImg))" />
                                @if (image.Principal)
                                {
                                    <MudIconButton Icon="@Icons.Material.Filled.Favorite" Color="Color.Primary" />
                                }
                                else
                                {
                                    <MudIconButton Icon="@Icons.Material.Filled.Favorite" Color="Color.Default" OnClick="@(() => ImagenFavorita(image))" />
                                }
                            </MudGrid>                            
                        </MudCardActions>
                    </MudCard>
                </MudItem>
            }
        </MudStack>
    }
    else
    {
        <MudItem lg="4"></MudItem>
        <MudItem lg="4">
            <MudText Align="Align.Center" Typo="Typo.h5" Color="Color.Error">El producto no posee imágenes todavía</MudText>
         </MudItem> 
         <MudItem lg="4">

         </MudItem>
    }
</MudGrid>

@code {
    [Parameter]
    public int id { get; set; }

    private int idUsAct;

    //Inyeccion de servicio para el Dialogo del boton
    [Inject] private IDialogService DialogService { get; set; }

    //Lista para guardar imagenes
    //private IList<string> imagesDataUrls = new List<string>();

    IEnumerable<ImagenProducto>? imagenes;
    private int maxAllowedFiles = 1;
    private string format = "image/png";

    private async Task OnInputFileChanged(InputFileChangeEventArgs e)
    {
        var cantImgSum = e.FileCount;
        if(cantImgSum == 1)
        {
            if(imagenes == null || imagenes.Count() < 5)
            {
                foreach (var imageFile in e.GetMultipleFiles(maxAllowedFiles))
                {
                    var resisedFile = await imageFile.RequestImageFileAsync(format, 250, 170);
                    var buffer = new byte[resisedFile.Size];

                    using (var stream = resisedFile.OpenReadStream())
                    {
                        await stream.ReadAsync(buffer);
                    }         

                    var imagen = new ImagenProducto()
                        {
                            IdProducto = id,
                            Contenido = buffer,
                            UsuarioCrea = idUsAct,
                            UsuarioModif = idUsAct
                        };

                    await ServImagenProducto.GuardarImagen(imagen);             
                }

                NavigationManager.NavigateTo($"/detallesProducto/imagenes/{id}", forceLoad: true);
            }
            else
                Snackbar.Add($"Solo se pueden cargar hasta 5 imágenes por producto. Deberá borrar alguna ya cargada.", Severity.Info);
        }
        else
            Snackbar.Add($"Cargar 1 imagen a la vez", Severity.Info);
    }

    protected override async Task OnInitializedAsync()
    {
        imagenes = await ServImagenProducto.ObtenerImagenes(id);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        //Guardo el ID del usuario actual
        idUsAct = Convert.ToInt32(await JS.InvokeAsync<string>("getUserId"));
    }

    private async void BorrarImagen(int idImagen)
    {
        var result = await DialogService.ShowMessageBox(
                    "¡Atención!", 
                    "Se procede a borrar la imagen y no podra ser recuperada. ¿Desea continuar?", 
                    yesText:"Borrar", cancelText:"Cancelar");

        if (result == true)
        {
            var borrado = await ServImagenProducto.BorrarImagen(idImagen);
            if (borrado)
                NavigationManager.NavigateTo($"/detallesProducto/imagenes/{id}", forceLoad: true);
            else
                Snackbar.Add($"No se pudo completar la acción", Severity.Info);  
        }  
        else    
            Snackbar.Add($"Se canceló la acción", Severity.Info);        
    }

    private async void ImagenFavorita(ImagenProducto imagenFavorita)
    {        
        imagenFavorita.UsuarioModif = idUsAct;

        var result = await ServImagenProducto.ImagenFavorita(imagenFavorita);
        if(result)
            NavigationManager.NavigateTo($"/detallesProducto/imagenes/{id}", forceLoad: true);
        else
            Snackbar.Add($"La modificación no se pudo llevar a cabo", Severity.Info); 
    }

    private void Volver() => NavigationManager.NavigateTo($"/detallesProducto/{id}");
}
