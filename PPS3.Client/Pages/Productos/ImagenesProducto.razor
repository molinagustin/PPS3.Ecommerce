@page "/detallesProducto/imagenes/{id:int}"
@inject IServImagenProducto ServImagenProducto
@inject NavigationManager NavigationManager
@inject ISnackbar Snackbar /*Servicio para las notificaciones*/
@inject IJSRuntime JS /*JS Interop*/
@attribute [Authorize(Roles = "1, 2")]

<AuthorizeView Context="usCont">
    <input type="hidden" id="UsAct" value="@usCont.User.Claims.First().Value" />
</AuthorizeView>

<MudText Align="Align.Center" Typo="Typo.h3">Imagenes del Producto</MudText>

<MudItem xs="4">
        <MudText Align="Align.Center" Typo="Typo.h5" Color="Color.Primary">Las imagenes seleccionadas se guardan automaticamente</MudText>
        <InputFile OnChange="OnInputFileChanged" multiple/>
</MudItem>

<MudItem xs="4">
        <MudIconButton Icon="@Icons.Material.Filled.ArrowBack" Color="Color.Default" OnClick="Volver">VOLVER </MudIconButton>
</MudItem>

<MudText Align="Align.Center" Typo="Typo.h5">Imagenes Guardadas</MudText>

<MudGrid>
    <MudItem xs="12">
        <MudStack Row="true" Style="max-width:max-content;">
            @if(imagenes != null && imagenes.Count() > 0)
            {
                @foreach(var image in imagenes)
                {
                    <MudItem xs="3">
                        <MudCard>                    
                            <MudCardContent>
                                <MudImage Elevation="2" ObjectFit="ObjectFit.Fill" Src="@image.UrlImagen" Style="width:250px; height:250px; margin:5px;"/>
                            </MudCardContent>
                            <MudCardActions>
                                <MudIconButton Icon="@Icons.Material.Filled.Delete" Color="Color.Error" OnClick="@(() => BorrarImagen(image.IdImg))"/>
                                    @if(image.Principal)
                                    {
                                        <MudIconButton Icon="@Icons.Material.Filled.Favorite" Color="Color.Primary"/>
                                    }
                                    else
                                    {
                                        <MudIconButton Icon="@Icons.Material.Filled.Favorite" Color="Color.Default" OnClick="@(() => ImagenFavorita(image))"/>
                                    }
                            </MudCardActions>                    
                        </MudCard>
                    </MudItem>
                }
            }
            else
            {
                <MudText Align="Align.Center" Typo="Typo.h5" Color="Color.Error">El producto no posee imagenes todavia</MudText>
            }
        </MudStack>
    </MudItem>    
</MudGrid>

@code {
    [Parameter]
    public int id { get; set; }

    private int idUsAct;

    //Inyeccion de servicio para el Dialogo del boton
    [Inject] private IDialogService DialogService { get; set; }

    //Lista para guardar imagenes
    //private IList<string> imagesDataUrls = new List<string>();

    IEnumerable<ImagenProducto>? imagenes;
    private int maxAllowedFiles = 10;
    private string format = "image/png";

    private async Task OnInputFileChanged(InputFileChangeEventArgs e)
    {
        foreach(var imageFile in e.GetMultipleFiles(maxAllowedFiles))
        {
            var resisedFile = await imageFile.RequestImageFileAsync(format, 250, 250);
            var buffer = new byte[resisedFile.Size];

            await resisedFile.OpenReadStream().ReadAsync(buffer);

            //var imageDataUrl = $"data:{format};base64,{Convert.ToBase64String(buffer)}";
            //var imageBytes = System.Convert.FromBase64String(Convert.ToBase64String(buffer));
            //var imageStrng = System.Convert.ToBase64String(imageBytes);
            //imagesDataUrls.Add(imageDataUrl);

            var imagen = new ImagenProducto()
            {
                IdProducto = id,
                Contenido = buffer,
                UsuarioCrea = idUsAct,
                UsuarioModif = idUsAct
            };

            await ServImagenProducto.GuardarImagen(imagen);
        }

        NavigationManager.NavigateTo($"/detallesProducto/imagenes/{id}", forceLoad: true);
    }

    protected override async Task OnInitializedAsync()
    {
        imagenes = await ServImagenProducto.ObtenerImagenes(id);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        //Guardo el ID del usuario actual
        idUsAct = Convert.ToInt32(await JS.InvokeAsync<string>("getUserId"));
    }

    private async void BorrarImagen(int idImagen)
    {
        var result = await DialogService.ShowMessageBox(
                    "¡Atencion!", 
                    "Se procede a borrar la imagen y no podra ser recuperada. ¿Desea continuar?", 
                    yesText:"Borrar", cancelText:"Cancelar");

        if (result == true)
        {
            var borrado = await ServImagenProducto.BorrarImagen(idImagen);
            if (borrado)
                NavigationManager.NavigateTo($"/detallesProducto/imagenes/{id}", forceLoad: true);
            else
                Snackbar.Add($"No se pudo completar la accion", Severity.Info);  
        }  
        else    
            Snackbar.Add($"Se cancelo la accion", Severity.Info);        
    }

    private async void ImagenFavorita(ImagenProducto imagenFavorita)
    {        
        imagenFavorita.UsuarioModif = idUsAct;

        var result = await ServImagenProducto.ImagenFavorita(imagenFavorita);
        if(result)
            NavigationManager.NavigateTo($"/detallesProducto/imagenes/{id}", forceLoad: true);
        else
            Snackbar.Add($"La modificacion no se pudo llevar a cabo", Severity.Info); 
    }

    private void Volver() => NavigationManager.NavigateTo($"/detallesProducto/{id}");
}
