@page "/verProducto/{id:int}"
@inject IServProducto ServProducto
@inject IServImagenProducto ServImagen
@inject IServCarroCompra ServCarro
@inject IServDetalleCarroCompra ServDetalleCarro
@inject NavigationManager NavigationManager
@inject ISnackbar Snackbar /*Servicio para las notificaciones*/
@inject IJSRuntime JS /*JS Interop*/
@inject IDialogService DialogService

@*Con ese modo de ver la autorizacion, se obtiene el Id del usuario si esta logueado o no*@
<AuthorizeView Context="usCont">
    <Authorized>
        <input type="hidden" id="UsAct" value="@usCont.User.Claims.First().Value" />
    </Authorized>    
    <NotAuthorized>
        <input type="hidden" id="UsAct" value="0" />
    </NotAuthorized>
</AuthorizeView>

@if(producto == null)
{
    <MudProgressLinear Color="Color.Primary" Striped="true" Indeterminate="true" Class="my-1" />
}
else
{
    <MudText Align="Align.Center" Typo="Typo.h4" Color="Color.Default"><b>@producto.NombreProd</b></MudText>
    <br />

    <MudGrid Justify="Justify.Center">
        <MudItem xs="4">
            <MudCarousel ItemsSource="imagenesProducto" Style="height:300px; width:400px;" ShowArrows=true ShowBullets=true AutoCycle=true SelectedIndex="0">
                <ItemTemplate Context="img">
		            <div class="d-flex flex-column flex-column justify-center" style="height:100%">
                        <MudImage Class="mx-auto" Elevation="2" ObjectFit="ObjectFit.Fill" Src="@img.UrlImagen" Style="width:250px; height:250px; margin:5px;"/>
		            </div>
	            </ItemTemplate>
            </MudCarousel>
        </MudItem>
        <MudItem xs="6">
            <MudCard Elevation="1">
                <MudCardHeader>
                    <CardHeaderContent>
                        <MudText Typo="Typo.h5" Align="Align.Center" Color="Color.Primary"><b>Informacion</b></MudText>
                    </CardHeaderContent>
                </MudCardHeader>
                <MudCardContent>
                    <MudText Align="Align.Left" Typo="Typo.h6"><b>Proveedor: </b>@producto.NombreProv</MudText>
                    <MudText Align="Align.Left" Typo="Typo.h6"><b>Rubro: </b>@producto.DescRubro</MudText>
                    <MudText Align="Align.Left" Typo="Typo.h6"><b>Medido En: </b>@producto.DescripcionUnidad</MudText>
                    @if(stock > 0)
                    {
                        <MudText Align="Align.Left" Typo="Typo.h6"><b>Stock Disponible: </b>@producto.StockExistencia</MudText>
                    }
                    else
                    {
                        <MudText Align="Align.Left" Typo="Typo.h6" Color="Color.Error"><b>Sin Stock Disponible</b></MudText>
                    }
                    @if(producto.Bonificacion > 0)
                    {

                        <MudText Align="Align.Left" Typo="Typo.h6">
                            <b>Precio: </b><span style="text-decoration:line-through;">$@precioOriginalProducto</span><span style="font-weight:bold;color:green;margin-left:10px;">@producto.Bonificacion% Bonif. = </span><b>
                                @if (producto.Bonificacion < 100)
                                {
                                    <b> @string.Format(new System.Globalization.CultureInfo("es-AR"), "{0:C}", producto.PrecioFinal)</b>
                                }
                                else
                                {
                                    <b>¡Gratis!</b>
                                }

                        </b></MudText>
                    }
                    else
                    {
                        <MudText Align="Align.Left" Typo="Typo.h6"><b>Precio: </b>$@producto.PrecioFinal</MudText>
                    }
                    <MudText Align="Align.Left" Typo="Typo.h6"><b>Calificacion: </b> <MudRating ReadOnly=true SelectedValue="4"/></MudText>
                </MudCardContent>
            </MudCard>            
        </MudItem>
        <MudItem xs="2">
            <AuthorizeView Context="usCont">
                <Authorized>
                    <EditForm Model="producto" OnValidSubmit="AgregarProducto">
                        <label for="CantProd">Cantidad</label>
                        <input @bind-value="strCant" @onkeydown="ProcessKeyPress" @onkeydown:preventDefault class="form-control" required="true" min="1" @onblur="CalculoSubTotal">
                        @*<MudTextField Label="Cantidad" HelperText="Formato 999,99 ó 999" @bind-Value="cantidad" For="@(() => producto.Cantidad)" Required="true" Immediate=true OnBlur="CalculoSubTotal"/>*@
                        <MudText @bind-Value="subTotal" ReadOnly=true>
                            Sub Total:
                            <b>
                                @if(subTotal > 0)
                                {
                                @string.Format(new System.Globalization.CultureInfo("es-AR"), "{0:C}", subTotal)
                                }
                                else
                                {
                                @string.Format("---")
                                }
                            </b>
                        </MudText>
                        <br>
                        <MudButton StartIcon="@Icons.Material.Filled.AddCircle" Color="Color.Success" Variant="Variant.Filled" ButtonType="ButtonType.Submit">Agregar al Carro</MudButton>
                    </EditForm>                    
                </Authorized>    
                <NotAuthorized>
                    <MudText Align="Align.Center" Typo="Typo.h6">Para agregar el producto al carro, debe loguearse o registrarse si todavia no tiene una cuenta.</MudText>
                    <MudTextField Label="Cantidad" HelperText="Formato 999,99 ó 999" @bind-Value="cantidad" Required="true" Disabled=true/>
                    <MudButton StartIcon="@Icons.Material.Filled.AddCircle" Color="Color.Success" Variant="Variant.Filled" Disabled=true>Agregar al Carro</MudButton>
                </NotAuthorized>
            </AuthorizeView>
        </MudItem>
    </MudGrid>

    <MudGrid Justify="Justify.Center">
        <MudItem xs="4">
        </MudItem>
        <MudItem xs="6">
            <MudCard Elevation="1">
                <MudCardHeader>
                    <CardHeaderContent>
                        <MudText Typo="Typo.h6" Align="Align.Center" Color="Color.Primary"><b>Descripcion del Producto</b></MudText>
                    </CardHeaderContent>
                </MudCardHeader>
                <MudCardContent>
                        <MudText Align="Align.Left" Typo="Typo.h6">@producto.Descripcion</MudText>
                </MudCardContent>
            </MudCard> 
        </MudItem>
        <MudItem xs="2">

        </MudItem>
    </MudGrid>

    <MudGrid Justify="Justify.Center" Style="margin-top:20px;">
        <MudItem xs="4">
            <MudText Align="Align.Center" Typo="Typo.h6"><b>Algunas Opiniones</b></MudText>

            <MudStack Row=true>
                <MudAvatar Color="Color.Transparent" Size="Size.Large" Image="images/avatar_hombre_1.jpg" />
                <MudText Align="Align.Left" Typo="Typo.body1" Style="margin-bottom:5px; margin-top:15px;" Color="Color.Primary">Andres Martinez</MudText>
            </MudStack>
            <MudText Align="Align.Left" Typo="Typo.body2" Style="margin-bottom:5px;" Color="Color.Default">"¡La atencion impecable, y su coordinacion para la entrega de productos fue muy buena!"</MudText>
            <MudRating ReadOnly=true SelectedValue="4"></MudRating>

            <MudStack Row=true>
                <MudAvatar Color="Color.Transparent" Size="Size.Large" Image="images/avatar_mujer.png" />
                <MudText Align="Align.Left" Typo="Typo.body1" Style="margin-bottom:5px; margin-top:15px;" Color="Color.Primary">Fernanda Lopez</MudText>
            </MudStack>
            <MudText Align="Align.Left" Typo="Typo.body2" Style="margin-bottom:5px;" Color="Color.Default">"Me gusto la facilidad con que pude ordenar mis productos, sin tantas vueltas, ¡solo un par de clicks y listo!"</MudText>
            <MudRating ReadOnly=true SelectedValue="4"></MudRating>
        </MudItem>

        <MudItem xs="6">
            <MudText Align="Align.Center" Typo="Typo.h6"><b>¡Tú opinion nos interesa!</b></MudText>

            <MudTextField T="string" Label="Que opinas del producto" Variant="Variant.Outlined" Lines="5" Style="margin-bottom:10px;"/>

            <MudText Align="Align.Left" Typo="Typo.h6" Style="margin-bottom:25px;"><b>Tú Calificación: </b> <MudRating SelectedValue="0"/></MudText>

            <AuthorizeView Context="usCont">
                <Authorized>
                    <MudGrid Justify="Justify.Center">
                        <MudButton StartIcon="@Icons.Material.Filled.SavedSearch" Color="Color.Info" Variant="Variant.Filled">Guardar Opinion</MudButton>
                    </MudGrid>                    
                </Authorized>

                <NotAuthorized>
                    <MudText Align="Align.Center" Typo="Typo.h6">Para dejar su opinion, le pedimos por favor que se loguee primero.</MudText>
                </NotAuthorized>
            </AuthorizeView>
        </MudItem>

        <MudItem xs="2"></MudItem>
    </MudGrid>
}

@code {
    //Parametro que se recibe por URL para una consulta del objeto
    [Parameter]
    public int id { get; set; }

    ProductoListado producto = new ProductoListado();
    IEnumerable<ImagenProducto> imagenesProducto;
    CarroCompra carro = new CarroCompra();
    IEnumerable<DetalleCarroCompra> detallesCarro;

    //Para almacenar el ID del usuario actual
    private int idUsAct;

    private decimal cantidad = 1;
    private string strCant = "1";
    private decimal stock = 0;
    private decimal subTotal = 0;
    private decimal precioOriginalProducto = 0;

    //Guardo el ID del usuario actual
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        idUsAct = Convert.ToInt32(await JS.InvokeAsync<string>("getUserId"));

        if(idUsAct > 0)
        {
            //Obtengo el carro activos y sus detalles si los hubiera
            carro = await ServCarro.ObtenerCarroActivoUsuario(idUsAct);
            if(carro != null)
                detallesCarro = await ServDetalleCarro.ObtenerDetallesCarro(carro.IdCarro);
        }
    }

    protected override async Task OnInitializedAsync()
    {
        producto = await ServProducto.ObtenerProductoListado(id);
        imagenesProducto = await ServImagen.ObtenerImagenes(id);
        stock = producto.StockExistencia;
        precioOriginalProducto = producto.PrecioFinal;
        if (producto.Bonificacion > 0)
        {
            if (producto.Bonificacion < 100) producto.PrecioFinal = (producto.PrecioFinal * ((100 - producto.Bonificacion) / 100));
            else producto.PrecioFinal = 0;
        }
        subTotal = producto.PrecioFinal;
    }

    private async Task AgregarProducto()
    {
        //Verifico que la cantidad del producto sea mayor a cero y no mayor que el stock disponible
        if(cantidad > 0 && cantidad <= stock)
        {          
            //Comprueba que exista un carro activo
            if(carro != null)
            {
                bool productoYaAgregado = false;

                if (detallesCarro != null && detallesCarro.Count() > 0)
                {
                    var listaDetalles = detallesCarro.ToList();
                    //Verifico que el producto no exista en el carro
                    productoYaAgregado = listaDetalles.Exists(p => p.Producto == producto.IdProducto);
                }

                if(!productoYaAgregado)
                {
                    //Creo un detalle del carro donde se guardara el producto
                    DetalleCarroCompra detalle = new DetalleCarroCompra();
                    detalle.Carro = carro.IdCarro;
                    detalle.Producto = producto.IdProducto;
                    detalle.Cantidad = cantidad;
                    detalle.PrecioUnit = precioOriginalProducto;
                    if (producto.Bonificacion > 0)
                    {
                        detalle.Bonificacion = producto.Bonificacion;
                        if (producto.Bonificacion < 100) detalle.BonificacionTotal = cantidad * (precioOriginalProducto - producto.PrecioFinal);
                        else detalle.BonificacionTotal = cantidad * precioOriginalProducto;
                    }
                    detalle.SubTotal = subTotal;

                    var nuevoDetalle = await ServDetalleCarro.GuardarDetalle(detalle);

                    //Si se guarda correctamente el detalle, procedo a mostrar una alerta y llevar al usuario al carro de compra para ver los detalles
                    if(nuevoDetalle)
                    {
                        //Consulto si quiere ver el carro o seguir comprando
                        var result = await DialogService.ShowMessageBox(
                                    "Elegir Accion",
                                    "El producto fue agregado. ¿Ver carro de compra?",
                                    yesText: "Ver Carro", cancelText: "Seguir Viendo Productos");

                        if (result == true)
                        {
                            NavigationManager.NavigateTo($"/verCarro/{carro.IdCarro}");
                            Snackbar.Add($"El detalle fue añadido correctamente.", Severity.Success);
                        }
                        else
                            NavigationManager.NavigateTo($"/");                        
                    }
                    else
                        Snackbar.Add($"El detalle del carro no pudo ser agregado correctamente.", Severity.Error);
                }
                else
                    Snackbar.Add($"El producto ya se encuentra en el carro, para modificarlo o agregar otra cantidad, debe eliminarlo primero.", Severity.Error);
            }
            else
                Snackbar.Add($"No se pudo obtener el carro del usuario", Severity.Error);
        }
        else
            Snackbar.Add($"La cantidad a agregar es incorrecta", Severity.Error);
    }

    private void CalculoSubTotal()
    {
        if (string.IsNullOrEmpty(strCant.Trim())) strCant = "1";
        if (strCant.Trim().StartsWith(',')) strCant = "0" + strCant;
        if (strCant.Contains(','))
        {
            var index = strCant.IndexOf(',');
            try{strCant = strCant.Substring(0, index + 3);}
            catch (Exception){strCant = strCant.Remove(index);}            
        }
        cantidad = Convert.ToDecimal(strCant);
        subTotal = producto.PrecioFinal * cantidad;
    }

    private static bool IsNumeric(string caracter)
    {
        int result;
        return int.TryParse(caracter, out result);
    }

    //Declaro una pila (ultimo en entrar primero en salir) Dejo la pila o cola porque es mas facil acceder a los elementos
    private Queue<Object> dato = new();

    private void ProcessKeyPress(KeyboardEventArgs e)
    {
        dato.Clear();
        var back = false;
        foreach (var c in strCant)
            dato.Enqueue(c.ToString());

        switch (e.Key)
        {
            case ".":
                if (!dato.Contains(","))
                    dato.Enqueue(",");
                break;
            case ",":
                if (!dato.Contains(","))
                    dato.Enqueue(",");
                break;
            default:
                if (IsNumeric(e.Key))
                    dato.Enqueue(e.Key);
                if (e.Code == "Backspace" && dato.Count() > 0)
                    back = true;
                break;
        }
        strCant = "";
        var can = back ? dato.Count - 1 : dato.Count;
        while (can > 0)
        {
            can--;
            strCant += dato.Dequeue();
        }            
    }
}