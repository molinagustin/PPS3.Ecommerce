@page "/registro"
@inject IServUsuario ServUsuario
@inject IServCondicionIVA ServCondIVA
@inject IServTipoDocumento ServTipoDoc
@inject IServLocalidad ServLocalidad
@inject IServProvincia ServProvincia
@inject NavigationManager NavigationManager
@inject ISnackbar Snackbar /*Servicio para las notificaciones*/

<MudText Typo="Typo.h4" Align="Align.Center" Style="margin-bottom:30px;">Registrar Nuevo Cliente</MudText>

<EditForm Model="@usuarioCliente" OnValidSubmit="@Registrarse">
    <DataAnnotationsValidator/>
    <MudGrid Justify="Justify.Center">
        <MudItem xs="6">
            <MudCard>
                <MudCardHeader>
                    <CardHeaderContent>
                        <MudText Typo="Typo.h6" Align="Align.Center" Color="Color.Primary">Datos de Sesion</MudText>
                    </CardHeaderContent>
                </MudCardHeader>
                <MudCardContent>
                    <MudTextField Label="Nombre Completo" HelperText="Apellido-Nombre para mejor servicio"
                              @bind-Value="usuarioCliente.NombreCompleto" For="@(() => usuarioCliente.NombreCompleto)"
                              AutoFocus = "true"/>
                    <MudTextField Label="Nombre de Usuario" HelperText="Nombre para iniciar sesion"
                              @bind-Value="usuarioCliente.NombreUs" For="@(() => usuarioCliente.NombreUs)"/>
                    <MudTextField Label="Email" HelperText="Correo electronico"
                              @bind-Value="usuarioCliente.Email" For="@(() => usuarioCliente.Email)"/>
                    <MudTextField Label="Contraseña" HelperText="Minimo 4 caracteres" Class="mt-3"
                                  @bind-Value="usuarioCliente.Password" For="@(() => usuarioCliente.Password)" 
                                  InputType="InputType.Password"/>
                    <MudTextField Label="Repetir Contraseña" HelperText="Minimo 4 caracteres" Class="mt-3"
                                  @bind-Value="password2" For="@(() => usuarioCliente.Password)" InputType="InputType.Password"/>
                </MudCardContent>
            </MudCard>
        </MudItem>

        <MudItem xs="6">
            <MudCard>
                <MudCardHeader>
                    <CardHeaderContent>
                        <MudText Typo="Typo.h6" Align="Align.Center" Color="Color.Primary">Datos de Comprobantes</MudText>
                    </CardHeaderContent>
                </MudCardHeader>
                <MudCardContent>
                    <MudStack Row="true">
                        <MudStack Style="width:50%">
                            <MudSelect T="string" @bind-Value="@tipoCl" Label="Tipo de Cliente/Persona" Variant="Variant.Outlined" AnchorOrigin="Origin.BottomCenter">
                                <MudSelectItem Value="@("Fisica")">@string.Format("1- Fisica")</MudSelectItem>
                                <MudSelectItem Value="@("Juridica")">@string.Format("2- Juridica")</MudSelectItem>
                            </MudSelect>
                        </MudStack>
                        <MudStack Style="width:50%">
                            @if (condIva != null)
                            {
                                <MudSelect T="int" @bind-Value="@cond" Label="Condicion IVA" Variant="Variant.Outlined" AnchorOrigin="Origin.BottomCenter">
                                    @foreach(var condicion in condIva)
                                    {
                                        <MudSelectItem Value="@condicion.IdCondicion">@(condIva.ToList().IndexOf(condicion) + 1) - @condicion.DescripcionCond</MudSelectItem>
                                    }
                                </MudSelect>
                            }
                            else
                            {
                                <MudProgressLinear Color="Color.Primary" Striped="true" Indeterminate="true" Class="my-1" />
                            }
                        </MudStack>
                    </MudStack>
                    
                    @if(tipoCl == "Fisica")
                    {
                        <MudSelect T="string" @bind-Value="@genero" Label="Genero" Variant="Variant.Outlined" AnchorOrigin="Origin.BottomCenter">
                            <MudSelectItem Value="@("Masculino")">@string.Format("1- Masculino")</MudSelectItem>
                            <MudSelectItem Value="@("Femenino")">@string.Format("2- Femenino")</MudSelectItem>
                            <MudSelectItem Value="@("Otro")">@string.Format("3- Otro")</MudSelectItem>
                        </MudSelect>
                    }
                    
                    <MudStack Row="true">
                        <MudStack Style="width:50%">
                            @if (tipoDoc != null)
                            {
                                <MudSelect T="int" @bind-Value="@tipoDocu" Label="Tipo de Documento" Variant="Variant.Outlined" AnchorOrigin="Origin.BottomCenter">
                                    @foreach(var tipos in tipoDoc)
                                    {
                                        <MudSelectItem Value="@tipos.IdTipoDoc">@(tipoDoc.ToList().IndexOf(tipos) + 1) - @tipos.Sigla</MudSelectItem>
                                    }
                                </MudSelect>
                            }
                            else
                            {
                                <MudProgressLinear Color="Color.Primary" Striped="true" Indeterminate="true" Class="my-1" />
                            }
                        </MudStack>
                        <MudStack Style="width:50%">
                            <MudTextField Label="Numero de Documento" HelperText="Solo numeros."
                                      @bind-Value="usuarioCliente.NumDocumento" For="@(() => usuarioCliente.NumDocumento)"/>
                        </MudStack>
                    </MudStack>

                    <MudStack Row="true" Justify="Justify.Center">
                        <MudStack Style="width:50%">
                             @if(provs != null)
                            {
                                <MudSelect T="int" @bind-Value="@prov" Label="Provincia" Variant="Variant.Outlined" AnchorOrigin="Origin.BottomCenter" SelectedValuesChanged="BuscarLocalidad">
                                    @foreach (var provincia in provs)
                                    {
                                        <MudSelectItem Value="@provincia.IdProvincia">@(provs.ToList().IndexOf(provincia) + 1) - @provincia.NombreProv</MudSelectItem>
                                    }
                                </MudSelect>
                            }
                            else
                            {
                                <MudProgressLinear Color="Color.Primary" Striped="true" Indeterminate="true" Class="my-1" />
                            }
                        </MudStack>
                        <MudStack Style="width:50%">
                            @if (loc != null)
                            {
                                @if (sinLocalidad)
                                {
                                    <MudText Typo="Typo.body1" Align="Align.Center" Color="Color.Error">La provincia seleccionada no tiene una localidad habilitada. Contacte al administrador.</MudText>
                                }
                                else
                                {
                                    <MudSelect T="int" @bind-Value="@loca" Label="Localidad" Variant="Variant.Outlined" AnchorOrigin="Origin.BottomCenter">
                                        @foreach (var local in loc)
                                        {
                                            <MudSelectItem Value="@local.IdLocalidad">@(loc.ToList().IndexOf(local) + 1) - @local.NombreLoc</MudSelectItem>
                                        }
                                    </MudSelect>                                    
                                }
                            }
                            else
                            {
                                <MudProgressLinear Color="Color.Primary" Striped="true" Indeterminate="true" Class="my-1" />
                            }
                        </MudStack>
                    </MudStack>

                    <MudStack Row="true" Justify="Justify.Center">
                        <MudStack Style="width:50%">
                            <MudTextField Label="Numero de Telefono" HelperText="Sin 15, 0 ni espacios o caracteres especiales." @bind-Value="usuarioCliente.Telefono" For="@(() => usuarioCliente.Telefono)" />
                        </MudStack>
                        <MudStack Style="width:50%">
                            <MudTextField Label="Domicilio" HelperText="Mas detalle, mejor servicio." @bind-Value="usuarioCliente.DomicilioC" For="@(() => usuarioCliente.DomicilioC)"/>
                        </MudStack>
                    </MudStack>

                </MudCardContent>
                <MudCardActions>
                    <MudButton FullWidth="true" StartIcon="@Icons.Material.Filled.AppRegistration" Color="Color.Success" ButtonType="ButtonType.Submit" Style="margin-bottom:5px;" Disabled=registrando>REGISTRARSE</MudButton>
                </MudCardActions>
            </MudCard>
        </MudItem>
    </MudGrid>
</EditForm>

@code {
    //Objeto para almacenar datos del registro
    private UsuarioCliente usuarioCliente = new UsuarioCliente();

    //Objetos para CBO
    private IEnumerable<CondicionIVA> condIva;
    private IEnumerable<TipoDocumento> tipoDoc;
    private IEnumerable<Localidad> loc;
    private IEnumerable<Localidad> locFiltradas = new List<Localidad>();
    private IEnumerable<Provincia> provs;

    private string tipoCl = "Fisica";
    private string genero = "Masculino";
    private int cond = 3;
    private int tipoDocu = 3;
    private int loca = 1;
    private int prov = 12;

    private bool registrando = false;
    private bool sinLocalidad = false;

    private string password2 = "";

    protected override async Task OnInitializedAsync()
    {
        condIva = await ServCondIVA.ObtenerCondiciones();
        tipoDoc = await ServTipoDoc.ObtenerTiposDocs();
        loc = await ServLocalidad.ObtenerLocalidades();
        provs = await ServProvincia.ObtenerProvincias();
    }

    private void BuscarLocalidad()
    {
        locFiltradas = loc.Where(x => x.Provincia == prov);
        if(locFiltradas == null || locFiltradas.Count() == 0)
        {
            sinLocalidad = true;
            loca = -1;
        }
        else
        {
            sinLocalidad = false;
            loca = locFiltradas.First().IdLocalidad;
        }
    }

    private async Task Registrarse()
    {
        if(sinLocalidad)
        {
            Snackbar.Add($"Debe seleccionar una provincia y localidad correcta.", Severity.Error);
            return;
        }

        if(string.IsNullOrEmpty(usuarioCliente.Password) || string.IsNullOrEmpty(password2))
            Snackbar.Add($"Las contraseñas no pueden estar vacias", Severity.Error);
        else
            if (usuarioCliente.Password == password2)
            {
                //Deshabilito el boton
                registrando = true;

                //Asigno los valores apropiados
                usuarioCliente.TipoCliente = Convert.ToChar(tipoCl.Substring(0, 1));
                usuarioCliente.Genero = Convert.ToChar(genero.Substring(0, 1));
                usuarioCliente.CondIva = cond;
                usuarioCliente.TipoDocumento = tipoDocu;
                usuarioCliente.LocalidadC = loca;
                usuarioCliente.URL = NavigationManager.BaseUri;

                var registrado = await ServUsuario.Registrarse(usuarioCliente);

                if (registrado)
                {
                    //Si se registro el usuario correctamente, le envio un email                    
                    NavigationManager.NavigateTo("/login");
                    Snackbar.Add($"Registro exitoso, ahora puede iniciar sesion.", Severity.Success);
                }                    
                else
                {
                    registrando = false;
                    Snackbar.Add($"No se pudo crear el usuario", Severity.Error); 
                }                    
            }
            else
                Snackbar.Add($"Las contraseñas no coinciden", Severity.Error);              
    }
}