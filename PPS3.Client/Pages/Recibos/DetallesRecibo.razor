@page "/detallesRecibo"
@inject IServEncabezadoCuentaCorriente ServCuentaCorr
@inject IServFormaPago ServFormaPago
@inject IServTarjeta ServTarj
@inject IServEncabezadoRecibo ServRecibo
@inject IServDetalleRecibo ServDetRecibo
@inject IServEncabezadoComprobante ServComp
@inject NavigationManager NavigationManager
@inject ISnackbar Snackbar /*Servicio para las notificaciones*/
@inject IJSRuntime JS /*JS Interop*/
@using Radzen.Blazor
@*Con el atributo Authorize se procede a regular el acceso a toda la pagina por usuarios autorizados solamente*@
@attribute [Authorize(Roles = "1, 2")]

<AuthorizeView Context="usCont">
    <input type="hidden" id="UsAct" value="@usCont.User.Claims.First().Value" />
</AuthorizeView>

<MudText Align="Align.Center" Typo="Typo.h4">Detalles del Recibo</MudText>

<MudButton StartIcon="@Icons.Material.Filled.ArrowBack" Color="Color.Primary" Variant="Variant.Outlined" Href="/listaRecibos" Size="Size.Small">Volver</MudButton>

@if(cuentasComp == null || formasPago == null)
{
    <MudProgressLinear Color="Color.Primary" Striped="true" Indeterminate="true" Class="my-1"/>
}
else
{
    <MudGrid Justify="Justify.Center">
        @*CUENTAS CORRIENTES*@
        <MudItem xs="2">
            <MudText Align="Align.Center" Typo="Typo.body1">Cuentas Corrientes</MudText>
            <RadzenGrid Data="@cuentasComp" TItem="CuentasCorrientesListado" RowSelect="@(args => cuentaSelect = args)" AllowFiltering="true" FilterCaseSensitivity="Radzen.FilterCaseSensitivity.CaseInsensitive" AllowPaging="true" PageSize="10" AllowSorting="true" Style="margin-bottom:10px;" AllowColumnResize="true">
                <Columns>
                    <RadzenGridColumn TItem="CuentasCorrientesListado" Property="NumCC" Title="N° CC"></RadzenGridColumn>
                    <RadzenGridColumn TItem="CuentasCorrientesListado" Property="NombreCompleto" Title="Cliente"></RadzenGridColumn>
                    <RadzenGridColumn TItem="CuentasCorrientesListado" Property="NumDocumento" Title="N° Doc."></RadzenGridColumn>
                </Columns>
            </RadzenGrid>
        </MudItem>
        @*COMPROBANTES*@
        <MudItem lg="8">
            <MudText Align="Align.Center" Typo="Typo.body1">Comprobantes Sin Pagar</MudText>
            <RadzenGrid Data="@cuentaSelect.Comprobantes" TItem="Comprobante" RowSelect="@(args => compSelect = args)" AllowFiltering="true" FilterCaseSensitivity="Radzen.FilterCaseSensitivity.CaseInsensitive" AllowPaging="true" PageSize="10" AllowSorting="true" Style="margin-bottom:10px;" AllowColumnResize="true">
                <Columns>
                    <RadzenGridColumn TItem="Comprobante" Property="IdEncab" Title="N° Comp."></RadzenGridColumn>
                    <RadzenGridColumn TItem="Comprobante" Property="TipoComp" Title="Tipo Comp."></RadzenGridColumn>
                    <RadzenGridColumn TItem="Comprobante" Property="FechaComp" Title="Fecha Comp."></RadzenGridColumn>
                    @*<RadzenGridColumn TItem="Comprobante" Property="FormaP" Title="Forma Pago"></RadzenGridColumn>*@
                    <RadzenGridColumn TItem="Comprobante" Property="Observaciones" Title="Observaciones"></RadzenGridColumn>
                    <RadzenGridColumn TItem="Comprobante" Property="UsuarioCrea" Title="Emitido Por"></RadzenGridColumn>
                    <RadzenGridColumn TItem="Comprobante" Property="ImporteFinal" Title="Importe Final">
                        <Template Context="impFin">
                            @string.Format(new System.Globalization.CultureInfo("es-AR"), "{0:C}", impFin.ImporteFinal)
                        </Template>
                        <FooterTemplate>
                            @if(cuentaSelect.Comprobantes != null)
                            {
                                @string.Format("TOTAL RESTANTE:");
                            }                            
                        </FooterTemplate>
                    </RadzenGridColumn>
                    <RadzenGridColumn TItem="Comprobante" Property="SaldoRestante" Title="Saldo Restante">
                        <Template Context="saldo">
                            @string.Format(new System.Globalization.CultureInfo("es-AR"), "{0:C}", saldo.SaldoRestante)
                        </Template>
                        <FooterTemplate>                            
                            @if(cuentaSelect.Comprobantes != null)
                            {
                                    <b>@string.Format(new System.Globalization.CultureInfo("es-AR"), "{0:C}", cuentaSelect.Comprobantes.Sum(s => s.SaldoRestante))</b>
                            }
                        </FooterTemplate>
                    </RadzenGridColumn>
                </Columns>
            </RadzenGrid>
        </MudItem>
        @*FORMULARIO*@
        <MudItem xs="2">
            <MudText Align="Align.Center" Typo="Typo.body1"><br /></MudText>
            <MudButton StartIcon="@Icons.Material.Filled.AddCircle" Color="Color.Primary" Variant="Variant.Outlined" OnClick="AgregarCompr">Agregar Comprobante</MudButton>
        </MudItem>
    </MudGrid>
}

<MudText Align="Align.Center" Typo="Typo.h5">Detalles del Recibo</MudText>

@if(comprobantesAgregados != null && comprobantesAgregados.Count() > 0)
{
    <MudGrid Justify="Justify.Center">
        @*COMPROBANTES AGREGADOS*@
        <MudItem lg="6">
            <MudSimpleTable Striped="true">
                <thead>
                    <tr>
                        <td>N° Comp.</td>
                        <td>Fecha Comp.</td>
                        <td>Observaciones</td>
                        <td>Importe Final</td>
                        <td>Saldo Restante</td>
                        <td></td>
                    </tr>
                </thead>                
                <tbody>
                    @foreach (var compAg in comprobantesAgregados)
                    {
                        <tr>
                            <td>@compAg.IdEncab</td>
                            <td>@compAg.FechaComp</td>
                            <td>@compAg.Observaciones</td>
                            <td>@string.Format(new System.Globalization.CultureInfo("es-AR"), "{0:C}", compAg.ImporteFinal)</td>
                            <td>@string.Format(new System.Globalization.CultureInfo("es-AR"), "{0:C}", compAg.SaldoRestante)</td>
                            <td><MudIconButton Icon="@Icons.Material.Filled.RemoveCircle" OnClick="@(e => RemoverCompr(compAg.IdEncab))" Color="Color.Error"/></td>
                        </tr>
                    }
                    <tr>
                        <td></td>
                        <td></td>
                        <td></td>
                        <td></td>
                        <td>TOTAL:</td>
                        <td><b>@string.Format(new System.Globalization.CultureInfo("es-AR"), "{0:C}", comprobantesAgregados.Sum(s => s.SaldoRestante))</b></td>
                    </tr>
                </tbody>
            </MudSimpleTable>
        </MudItem>
        @*FECHA Y FORMA PAGO*@
        <MudItem xs="2">
            <MudDatePicker Label="Fecha del Recibo" Editable="true" @bind-Date="fechaRecibo" Placeholder="Seleccionar Fecha" Required="true"/>

            <MudSelect T="int" @bind-Value="@formaPag" Label="Forma Pago" Variant="Variant.Outlined" AnchorOrigin="Origin.BottomCenter">
                @foreach(var fp in formasPago)
                {
                    <MudSelectItem Value="@fp.IdFormaP">@fp.FormaP</MudSelectItem>
                }
            </MudSelect>
            @if(formaPag == 2 || formaPag == 3)
            {
                <MudTextField Label="N° Tarjeta" HelperText="4 ultimos digitos" @bind-Value="numTarj" MaxLength="4"/>
            }
            else
            {
                tarjeta = 8;
                numTarj = "";
            }
        </MudItem>
        @*IMPORTE A PAGAR Y OBSERVACIONES*@
        <MudItem xs="2">
            <MudStack Justify="Justify.Center">
                <MudStack>
                    <MudSwitch @bind-Checked="pagoCompleto" Label="Pago Completo" Color="Color.Success"/>
                    @if(!pagoCompleto)
                    {                    
                        <MudTextField Label="Importe A Abonar" HelperText="Formato 999,99 ó 999" @bind-Value="importe" For="@(() => recibo.ImporteTotal)" Required="true" AdornmentIcon="@Icons.Material.Filled.Money"/>
                    }  
                    else
                    {
                        importe = 0;
                    }
                </MudStack>
                <MudStack>
                    <MudTextField T="string" Label="Observaciones" Variant="Variant.Outlined" @bind-Value="observ" Lines="5" />
                </MudStack>
            </MudStack>
        </MudItem>
        @*BOTON*@
        <MudItem xs="2">
            <MudButton StartIcon="@Icons.Material.Filled.Done" Color="Color.Success" Variant="Variant.Outlined" OnClick="GenerarRecibo">Generar Recibo</MudButton>
        </MudItem>
    </MudGrid>
}
else
{
    <MudText Align="Align.Center" Typo="Typo.h6" Color="Color.Error">NINGUN COMPROBANTE AGREGADO</MudText>
}

@code {
    IEnumerable<CuentasCorrientesListado> cuentasComp;
    CuentasCorrientesListado cuentaSelect = new CuentasCorrientesListado();
    List<Comprobante> comprobantesAgregados;
    Comprobante? compSelect;
    IEnumerable<FormaPago> formasPago;
    IEnumerable<Tarjeta> tarjetas;
    EncabezadoRecibo recibo = new EncabezadoRecibo();

    private int formaPag = 1;
    private int tarjeta = 8;   
    private string observ = "";
    private string numTarj = "";
    private DateTime? fechaRecibo;
    private bool pagoCompleto = true;
    private decimal importe;

    //Para almacenar el ID del usuario actual
    private int idUsAct;

    //Guardo el ID del usuario actual
    protected override async Task OnAfterRenderAsync(bool firstRender) => idUsAct = Convert.ToInt32(await JS.InvokeAsync<string>("getUserId")); 

    protected override async Task OnInitializedAsync()
    {
        cuentasComp = await ServCuentaCorr.ObtenerListadoCCCompr();
        formasPago = await ServFormaPago.ObtenerFormasPago();
        tarjetas = await ServTarj.ObtenerTarjetas();
        comprobantesAgregados = new List<Comprobante>();
        fechaRecibo = DateTime.Today;
    }

    protected void AgregarCompr()
    {
        if(compSelect != null)
        {
            //Verifico si el comprobante ya se encuentra en el listado
            var compYaAgregado = comprobantesAgregados.Exists(a => a.IdEncab == compSelect.IdEncab);
            if(!compYaAgregado)
            {
                comprobantesAgregados.Add(compSelect);
                compSelect = null;
            }
            else
                Snackbar.Add($"El comprobante ya se encuentra agregado al listado", Severity.Error);
        }
        else
            Snackbar.Add($"Debe seleccionar el comprobante a agregar", Severity.Error);
    }

    protected string RemoverCompr(int id)
    {
        if(id > 0)
        {
            if (comprobantesAgregados != null && comprobantesAgregados.Count() > 1)
            {
                var comp = comprobantesAgregados.Find(f => f.IdEncab == id);
                comprobantesAgregados.Remove(comp);
                Snackbar.Add($"Comprobante Removido", Severity.Success);
            }
            else
                comprobantesAgregados.Clear();
        }
        else
            Snackbar.Add($"Debe seleccionar el comprobante a remover", Severity.Error);
        return "";
    }

    private async Task GenerarRecibo()
    {
        if (comprobantesAgregados != null && comprobantesAgregados.Count() > 0)
        {
            if(importe > 0 || pagoCompleto)
            {
                if(fechaRecibo != null && fechaRecibo <= DateTime.Today)
                {
                    //Verifico que el importe a ingresar no sea mayor a la suma de los comprobantes
                    var importeComprobantes = comprobantesAgregados.Sum(s => s.SaldoRestante);

                    if (pagoCompleto)
                        recibo.ImporteTotal = importeComprobantes;
                    else
                        recibo.ImporteTotal = importe;

                    if(importeComprobantes >= recibo.ImporteTotal)
                    {
                        //Ver cada comprobante, e irles restando a cada saldo restante correspondiente el importe del recibo hasta tanto sea 0, y en ese momento, actualizar dicho comprobante y pasar al siguiente, hasta tanto el importe del recibo sea 0, momento en el que dejo de actualizar los comprobantes aun si hubieran mas en cola
                        //Se va a tomar el ID del cliente del primer comprobante como referencia para guardar en el recibo, ya que pueden utilizarse de varias personas pero solo hay uno por recibo

                        //Actualizo los datos del recibo
                        recibo.IdCliente = comprobantesAgregados.First().ClienteComp;
                        recibo.FechaRecibo = Convert.ToDateTime(fechaRecibo);
                        recibo.FormaPago = formaPag;
                        recibo.Tarjeta = tarjeta;
                        recibo.NumTarjeta = numTarj;
                        recibo.Observaciones = observ;
                        recibo.UsuarioCrea = idUsAct;

                        //Guardo el recibo para obtener su ID y usarlo en los detalles
                        var idRec = await ServRecibo.CrearEncabRec(recibo);

                        if(idRec > 0)
                        {
                            //Guardo el importe total del recibo para irlo restando de los comprobantes
                            var saldoReciboRest = recibo.ImporteTotal;

                            //Con una variable veo si se terminan de guardar los comprobantes
                            var cantCompr = comprobantesAgregados.Count();
                            var cantComprGuardados = 0;

                            //Veo cada comprobante y le voy restando el importe restante del recibo
                            foreach (var comp in comprobantesAgregados)
                            {
                                if (saldoReciboRest > 0)
                                {
                                    var saldo = saldoReciboRest;
                                    var saldoRestanteComp = comp.SaldoRestante;
                                    //             2500                6000 = -3500
                                    //             6000                2500 = 3500
                                    saldo = comp.SaldoRestante - saldoReciboRest;

                                    if(saldo > 0)
                                    {
                                        //Saldo positivo quiere decir que va a quedar un restante en el saldo pendiente dle comprobante
                                        DetalleRecibo detalle = new DetalleRecibo();

                                        detalle.IdComprobante = comp.IdEncab;
                                        detalle.IdRecibo = idRec;
                                        detalle.Importe = saldoReciboRest;

                                        var detalleCreado = await ServDetRecibo.CrearDetalleRecibo(detalle);

                                        //Si se inserta correctamente el detalle, continuo con el comprobante apropiado
                                        if(detalleCreado)
                                        {
                                            //Se actualiza el comprobante correspondiente
                                            comp.SaldoRestante -= saldoReciboRest;
                                            comp.Pagado = false;

                                            var compAct = await ServComp.ActualizarComprobante(comp);

                                            if (compAct)
                                            {
                                                cantComprGuardados++;
                                                continue;
                                            }                                            
                                            else
                                            {
                                                Snackbar.Add($"No se pudo actualizar el comprobante del recibo por un error. Se descontinua la operacion.", Severity.Error);                   
                                                break;
                                            }    
                                        }
                                        else
                                        {
                                            Snackbar.Add($"No se pudo insertar el detalle del recibo por un error.", Severity.Error);
                                            break;
                                        }   
                                    }
                                    else
                                    {
                                        //Saldo negativo (quiere decir que queda saldo para seguir restando a los comprobantes siguientes)
                                        //Actualizo el saldo restante (Obtengo el valor absoluto porque llegaria un valor negativo, indicando que todavia queda salgo para restar)
                                        saldoReciboRest = Math.Abs(saldo);

                                        DetalleRecibo detalle = new DetalleRecibo();    

                                        //Guardo los valores del detalle del recibo
                                        detalle.IdComprobante = comp.IdEncab;
                                        detalle.IdRecibo = idRec;
                                        detalle.Importe = saldoRestanteComp;

                                        var detalleCreado = await ServDetRecibo.CrearDetalleRecibo(detalle);

                                        //Si se inserta correctamente el detalle, continuo con el comprobante apropiado
                                        if(detalleCreado)
                                        {
                                            //Se actualiza el comprobante correspondiente
                                            comp.SaldoRestante = 0;
                                            comp.Pagado = true;

                                            var compAct = await ServComp.ActualizarComprobante(comp);

                                            if (compAct)
                                            {
                                                cantComprGuardados++;
                                                continue;
                                            }                                            
                                            else
                                            {
                                                Snackbar.Add($"No se pudo actualizar el comprobante del recibo por un error. Se descontinua la operacion.", Severity.Error);                   
                                                break;
                                            }                                    
                                        }
                                        else
                                        {
                                            Snackbar.Add($"No se pudo insertar el detalle del recibo por un error.", Severity.Error);
                                            break;
                                        }                                             
                                    }
                                }
                                else
                                    break;
                            }

                            //Si se terminan todas las operaciones correctamente, recargo la pagina
                            if (cantCompr == cantComprGuardados)
                                NavigationManager.NavigateTo("/detallesRecibo", forceLoad:true);
                        }
                        else
                            Snackbar.Add($"No se pudo generar el recibo (encabezado). Error de insercion.", Severity.Error);                        
                    }
                    else
                        Snackbar.Add($"El importe del recibo no puede superar la suma a ingresar de los comprobantes", Severity.Error);
                }
                else
                    Snackbar.Add($"La fecha es incorrecta", Severity.Error);
            }
            else
                Snackbar.Add($"El importe del recibo debe ser mayor a 0", Severity.Error);
        }
        else
            Snackbar.Add($"No se puede generar el recibo porque el listado de comprobantes es incorrecto", Severity.Error);
    }
}