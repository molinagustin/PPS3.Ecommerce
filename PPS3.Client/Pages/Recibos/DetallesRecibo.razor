@page "/detallesRecibo"
@inject IServEncabezadoCuentaCorriente ServCuentaCorr
@inject IServCarroCompra ServCarroCompra
@inject IServDetalleCarroCompra ServDetalleCarro
@inject IServFormaPago ServFormaPago
@inject IServTarjeta ServTarj
@inject IServEncabezadoRecibo ServRecibo
@inject IServDetalleRecibo ServDetRecibo
@inject IServEncabezadoComprobante ServComp
@inject NavigationManager NavigationManager
@inject ISnackbar Snackbar /*Servicio para las notificaciones*/
@inject IJSRuntime JS /*JS Interop*/
@inject IDialogService DialogService
@using Radzen.Blazor
@*Con el atributo Authorize se procede a regular el acceso a toda la pagina por usuarios autorizados solamente*@
@attribute [Authorize(Roles = "1, 2")]

<AuthorizeView Context="usCont">
    <input type="hidden" id="UsAct" value="@usCont.User.Claims.First().Value" />
</AuthorizeView>

<MudText Align="Align.Center" Typo="Typo.h5" Style="margin-bottom: 30px;">Nuevo Recibo</MudText>

<MudButton StartIcon="@Icons.Material.Filled.ArrowBack" Color="Color.Primary" Variant="Variant.Outlined" Href="/listaRecibos" Size="Size.Small" Style="margin-bottom:10px;">Volver</MudButton>

@if(cuentasComp == null || formasPago == null)
{
    <MudProgressLinear Color="Color.Primary" Striped="true" Indeterminate="true" Class="my-1"/>
}
else
{
    <MudGrid Justify="Justify.Center">
        @*CUENTAS CORRIENTES*@
        <MudItem xs="3">
            <MudText Align="Align.Center" Typo="Typo.h6">Cuentas Corrientes</MudText>
            <RadzenGrid Data="@cuentasComp" TItem="CuentasCorrientesListado" RowSelect="@(args => cuentaSelect = args)" AllowFiltering="true" FilterCaseSensitivity="Radzen.FilterCaseSensitivity.CaseInsensitive" AllowPaging="true" PageSize="10" AllowSorting="true" Style="margin-bottom:10px;" AllowColumnResize="true">
                <Columns>
                    <RadzenGridColumn TItem="CuentasCorrientesListado" Property="NumCC" Title="N° CC" Width="70px"></RadzenGridColumn>
                    <RadzenGridColumn TItem="CuentasCorrientesListado" Property="NombreCompleto" Title="Cliente"></RadzenGridColumn>
                    <RadzenGridColumn TItem="CuentasCorrientesListado" Property="NumDocumento" Title="N° Doc." Width="90px"></RadzenGridColumn>
                </Columns>
            </RadzenGrid>
        </MudItem>
        @*COMPROBANTES*@
        <MudItem lg="8">
            <MudText Align="Align.Center" Typo="Typo.h6">Comprobantes Sin Pagar</MudText>
            <RadzenGrid Data="@cuentaSelect.Comprobantes" TItem="Comprobante" RowSelect="@(args => compSelect = args)" AllowFiltering="true" FilterCaseSensitivity="Radzen.FilterCaseSensitivity.CaseInsensitive" AllowPaging="true" PageSize="10" AllowSorting="true" Style="margin-bottom:10px;" AllowColumnResize="true">
                <Columns>
                    <RadzenGridColumn TItem="Comprobante" Property="IdEncab" Title="N° Comp." Width="90px"></RadzenGridColumn>
                    <RadzenGridColumn TItem="Comprobante" Property="TipoComp" Title="Tipo" Width="100px"></RadzenGridColumn>
                    <RadzenGridColumn TItem="Comprobante" Property="FechaComp" Title="Fecha" Width="100px">
                        <Template Context="fecha">
                            @string.Format("{0:d}", fecha.FechaComp)
                        </Template>
                    </RadzenGridColumn>
                    @*<RadzenGridColumn TItem="Comprobante" Property="FormaP" Title="Forma Pago"></RadzenGridColumn>*@
                    <RadzenGridColumn TItem="Comprobante" Property="Observaciones" Title="Observaciones"></RadzenGridColumn>
                    <RadzenGridColumn TItem="Comprobante" Property="UsuarioCrea" Title="Creador" Width="100px"></RadzenGridColumn>
                    <RadzenGridColumn TItem="Comprobante" Property="ImporteFinal" Title="Importe" Width="120px">
                        <Template Context="impFin">
                            @string.Format(new System.Globalization.CultureInfo("es-AR"), "{0:C}", impFin.ImporteFinal)
                        </Template>
                        <FooterTemplate>
                            @if(cuentaSelect.Comprobantes != null)
                            {
                                @string.Format("TOTAL REST.:");
                            }                            
                        </FooterTemplate>
                    </RadzenGridColumn>
                    <RadzenGridColumn TItem="Comprobante" Property="SaldoRestante" Title="Saldo Rest." Width="120px">
                        <Template Context="saldo">
                            @string.Format(new System.Globalization.CultureInfo("es-AR"), "{0:C}", saldo.SaldoRestante)
                        </Template>
                        <FooterTemplate>                            
                            @if(cuentaSelect.Comprobantes != null)
                            {
                                    <b>@string.Format(new System.Globalization.CultureInfo("es-AR"), "{0:C}", cuentaSelect.Comprobantes.Sum(s => s.SaldoRestante))</b>
                            }
                        </FooterTemplate>
                    </RadzenGridColumn>
                </Columns>
            </RadzenGrid>
        </MudItem>
        @*FORMULARIO*@
        <MudItem xs="1">
            <MudText Align="Align.Center" Typo="Typo.body1"><br /><br /></MudText>
            <MudButton StartIcon="@Icons.Material.Filled.AddCircle" Color="Color.Primary" Variant="Variant.Outlined" OnClick="AgregarCompr">Agregar Comprobante</MudButton>
        </MudItem>
    </MudGrid>
}

<MudText Align="Align.Center" Typo="Typo.h6" Style="margin-top:15px; margin-bottom:10px;">Detalles del Recibo</MudText>

@if(comprobantesAgregados != null && comprobantesAgregados.Count() > 0)
{
    <MudGrid Justify="Justify.Center">
        @*COMPROBANTES AGREGADOS*@
        <MudItem lg="6">
            <MudSimpleTable Striped="true">
                <thead>
                    <tr>
                        <td style="width:90px;">N° Comp.</td>
                        <td style="width:90px;">Fecha</td>
                        <td>Observaciones</td>
                        <td style="width:100px;">Importe</td>
                        <td style="width:100px;">Saldo Rest.</td>
                        <td></td>
                    </tr>
                </thead>                
                <tbody>
                    @foreach (var compAg in comprobantesAgregados)
                    {
                        <tr>
                            <td style="width:90px;">@compAg.IdEncab</td>
                            <td style="width:90px;">@string.Format("{0:d}", compAg.FechaComp)</td>
                            <td>@compAg.Observaciones</td>
                            <td style="width:100px;">@string.Format(new System.Globalization.CultureInfo("es-AR"), "{0:C}", compAg.ImporteFinal)</td>
                            <td style="width:100px;">@string.Format(new System.Globalization.CultureInfo("es-AR"), "{0:C}", compAg.SaldoRestante)</td>
                            <td><MudIconButton Icon="@Icons.Material.Filled.RemoveCircle" OnClick="@(e => RemoverCompr(compAg.IdEncab))" Color="Color.Error" /></td>
                        </tr>
                    }
                    <tr>
                        <td style="width:90px;"></td>
                        <td style="width:90px;"></td>
                        <td></td>
                        <td style="width:100px;"></td>
                        <td style="width:100px;">TOTAL:</td>
                        <td><b>@string.Format(new System.Globalization.CultureInfo("es-AR"), "{0:C}", comprobantesAgregados.Sum(s => s.SaldoRestante))</b></td>
                    </tr>
                </tbody>
            </MudSimpleTable>
        </MudItem>
        @*FECHA Y FORMA PAGO*@
        <MudItem xs="2">
            @if(formaPag == 9) //Baja Comprobante
            {
                fechaRecibo = DateTime.Today;
            }
            else
            {
                @*<MudDatePicker Label="Fecha del Recibo" Editable="true" @bind-Date="fechaRecibo" Placeholder="Seleccionar Fecha" Required="true" Style="margin-bottom:5px;" />*@
            }

            <MudSelect T="int" @bind-Value="@formaPag" Label="Forma Pago" Variant="Variant.Outlined" AnchorOrigin="Origin.BottomCenter">
                @foreach(var fp in formasPago)
                {
                    <MudSelectItem Value="@fp.IdFormaP">@(formasPago.ToList().IndexOf(fp) + 1) - @fp.FormaP</MudSelectItem>
                }
            </MudSelect>
            @if(formaPag == 2 || formaPag == 3)
            {
                <MudTextField Label="N° Tarjeta" HelperText="4 últimos dígitos" @bind-Value="numTarj" MaxLength="4"/>
            }
            else
            {
                tarjeta = 8;
                numTarj = "";
            }
        </MudItem>
        @*IMPORTE A PAGAR Y OBSERVACIONES*@
        <MudItem xs="2">
            <MudStack Justify="Justify.Center">
                @if(formaPag == 9) //Baja Comprobante
                {
                    pagoCompleto = true;
                    importe = 0;
                }
                else
                {
                    <MudStack>
                        <MudSwitch @bind-Checked="pagoCompleto" Label="Pago Completo" Color="Color.Success" Style="margin-bottom:5px;" />
                        @if(!pagoCompleto)
                        {
                            <label for="importe">Importe A Abonar</label>
                            <input @bind-value="strImporte" @onkeydown="ProcessKeyPress" @onkeydown:preventDefault class="form-control" required="true" @onblur="Calculo" name="importe" @onfocus="CheckValor">
                            @*<MudTextField Label="Importe A Abonar" HelperText="Formato 999,99 ó 999" @bind-Value="importe" For="@(() => recibo.ImporteTotal)" Required="true" AdornmentIcon="@Icons.Material.Filled.Money"/>*@
                        }  
                        else
                        {
                            importe = 0;
                            strImporte = "0";
                        }
                    </MudStack>
                }
                <MudStack>
                    <MudTextField T="string" Label="Observaciones" Variant="Variant.Outlined" @bind-Value="observ" Lines="5" />
                </MudStack>
            </MudStack>
        </MudItem>
        @*BOTON*@
        <MudItem xs="2">
            <MudButton StartIcon="@Icons.Material.Filled.Done" Color="Color.Success" Variant="Variant.Outlined" OnClick="GenerarRecibo">Generar Recibo</MudButton>
        </MudItem>
    </MudGrid>
}
else
{
    <MudText Align="Align.Center" Typo="Typo.h6" Color="Color.Error">Todavía no se agregó ningún comprobante</MudText>
}

@code {
    IEnumerable<CuentasCorrientesListado> cuentasComp;
    CuentasCorrientesListado cuentaSelect = new CuentasCorrientesListado();
    List<Comprobante> comprobantesAgregados;
    Comprobante? compSelect;
    IEnumerable<FormaPago> formasPago;
    IEnumerable<Tarjeta> tarjetas;
    EncabezadoRecibo recibo = new EncabezadoRecibo();

    private int formaPag = 1;
    private int tarjeta = 8;   
    private string observ = "";
    private string numTarj = "";
    private DateTime? fechaRecibo;
    private bool pagoCompleto = true;
    private decimal importe = 0;
    private string strImporte = "0";

    //Para almacenar el ID del usuario actual
    private int idUsAct;

    //Guardo el ID del usuario actual
    protected override async Task OnAfterRenderAsync(bool firstRender) => idUsAct = Convert.ToInt32(await JS.InvokeAsync<string>("getUserId")); 

    protected override async Task OnInitializedAsync()
    {
        cuentasComp = await ServCuentaCorr.ObtenerListadoCCCompr();
        formasPago = await ServFormaPago.ObtenerFormasPago();
        tarjetas = await ServTarj.ObtenerTarjetas();
        comprobantesAgregados = new List<Comprobante>();
        fechaRecibo = DateTime.Today;
    }

    protected void AgregarCompr()
    {
        if(compSelect != null)
        {
            //Verifico si el comprobante ya se encuentra en el listado
            var compYaAgregado = comprobantesAgregados.Exists(a => a.IdEncab == compSelect.IdEncab);
            if(!compYaAgregado)
            {
                comprobantesAgregados.Add(compSelect);
                compSelect = null;
            }
            else
                Snackbar.Add($"El comprobante ya se encuentra agregado al listado", Severity.Error);
        }
        else
            Snackbar.Add($"Debe seleccionar el comprobante a agregar", Severity.Error);
    }

    protected string RemoverCompr(int id)
    {
        if(id > 0)
        {
            if (comprobantesAgregados != null && comprobantesAgregados.Count() > 1)
            {
                var comp = comprobantesAgregados.Find(f => f.IdEncab == id);
                comprobantesAgregados.Remove(comp);
                Snackbar.Add($"Comprobante Removido", Severity.Success);
            }
            else
                comprobantesAgregados.Clear();
        }
        else
            Snackbar.Add($"Debe seleccionar el comprobante a remover", Severity.Error);
        return "";
    }

    private void Calculo()
    {
        if (string.IsNullOrEmpty(strImporte.Trim())) strImporte = "0";
        if (strImporte.Trim().StartsWith(',')) strImporte = "0" + strImporte;
        if (strImporte.Contains(','))
        {
            var index = strImporte.IndexOf(',');
            try { strImporte = strImporte.Substring(0, index + 3); }
            catch (Exception) { strImporte = strImporte.Remove(index); }
        }
        importe = Convert.ToDecimal(strImporte);
        strImporte = importe.ToString();
    }

    private static bool IsNumeric(string caracter)
    {
        int result;
        return int.TryParse(caracter, out result);
    }

    //Declaro una pila (ultimo en entrar primero en salir) Dejo la pila o cola porque es mas facil acceder a los elementos
    private Queue<Object> dato = new();

    private void ProcessKeyPress(KeyboardEventArgs e)
    {
        dato.Clear();
        var back = false;
        foreach (var c in strImporte)
            dato.Enqueue(c.ToString());

        switch (e.Key)
        {
            case ".":
                if (!dato.Contains(","))
                    dato.Enqueue(",");
                break;
            case ",":
                if (!dato.Contains(","))
                    dato.Enqueue(",");
                break;
            default:
                if (IsNumeric(e.Key))
                    dato.Enqueue(e.Key);
                if (e.Code == "Backspace" && dato.Count() > 0)
                    back = true;
                break;
        }
        strImporte = "";
        var can = back ? dato.Count - 1 : dato.Count;
        while (can > 0)
        {
            can--;
            strImporte += dato.Dequeue();
        }
    }

    private void CheckValor(){if(strImporte == "0") strImporte = "";}

    private async Task GenerarRecibo()
    {
        if (comprobantesAgregados != null && comprobantesAgregados.Count() > 0)
        {
            if(importe > 0 || pagoCompleto)
            {
                if(fechaRecibo != null && fechaRecibo <= DateTime.Today)
                {
                    //Verifico que la forma de pago sea distinta a Sin Pagar (ID = 7)
                    if(formaPag != 7)
                    {   
                        if(formaPag == 2 || formaPag == 3)
                        {
                            if(!int.TryParse(numTarj, out int result))
                            {
                                Snackbar.Add($"El número de tarjeta no es válido.", Severity.Error);
                                return;
                            }                            

                            if(numTarj.Contains(' '))
                            {
                                Snackbar.Add($"El número de tarjeta no es válido.", Severity.Error);
                                return;
                            }
                        }

                        //Verifico si es una Baja de Comprobante
                        if(formaPag == 9 && observ.Trim().Length < 1)
                        {
                            Snackbar.Add($"Se debe colocar un motivo de la Baja del Comprobante.", Severity.Error);
                            return;
                        }

                        //Verifico que el importe a ingresar no sea mayor a la suma de los comprobantes
                        var importeComprobantes = comprobantesAgregados.Sum(s => s.SaldoRestante);

                        if (pagoCompleto) recibo.ImporteTotal = importeComprobantes;
                        else recibo.ImporteTotal = importe;

                        if(importeComprobantes >= recibo.ImporteTotal)
                        {
                            //Genero una alerta para que el usuario confirme la accion
                            var options = new DialogOptions { CloseOnEscapeKey = true };
                            var dialog = DialogService.Show<DialogRecibo>("Confirmar Creación de Recibo", options);
                            var resultDialog = await dialog.Result;

                            if (!resultDialog.Cancelled)
                            {
                                //Se trata de una Baja de Comprobante
                                if(formaPag == 9)
                                {
                                    //Actualizo los datos del recibo
                                    recibo.IdCliente = comprobantesAgregados.First().ClienteComp;
                                    recibo.FechaRecibo = Convert.ToDateTime(fechaRecibo);
                                    recibo.FormaPago = formaPag;
                                    recibo.Tarjeta = tarjeta;
                                    recibo.NumTarjeta = numTarj;
                                    recibo.Observaciones = observ;
                                    recibo.UsuarioCrea = idUsAct;

                                    //Guardo el recibo para obtener su ID y usarlo en los detalles
                                    var idRec = await ServRecibo.CrearEncabRec(recibo);

                                    if (idRec > 0)
                                    {
                                        //Genero los detalles del recibo y actualizo los comprobantes
                                        foreach (var comp in comprobantesAgregados)
                                        {
                                            DetalleRecibo detalle = new DetalleRecibo();
                                            detalle.IdComprobante = comp.IdEncab;
                                            detalle.IdRecibo = idRec;
                                            detalle.Importe = comp.SaldoRestante;
                                            var detalleCreado = await ServDetRecibo.CrearDetalleRecibo(detalle);

                                            //Si se crea el detalle correctamente, procedo a actualizar los comprobantes
                                            if (detalleCreado)
                                            {
                                                //Se actualiza el comprobante correspondiente
                                                comp.SaldoRestante = 0;
                                                comp.Pagado = true;
                                                var compAct = await ServComp.ActualizarComprobante(comp);

                                                if (compAct)
                                                {
                                                    //Actualizo el carro de compras del comprobante
                                                    var carroAct = await ServCarroCompra.BajaComprobanteCarro(comp.Carro);
                                                    if(!carroAct)
                                                    {
                                                        Snackbar.Add($"No se pudo actualizar el carro y dar de baja su comprobante.", Severity.Error);
                                                        break;
                                                    }

                                                    //Busco los detalles para saber que productos actualizar
                                                    var prodsAct = await ServDetalleCarro.ActualizarStockProductos(comp.Carro);

                                                    if (!prodsAct)
                                                    {
                                                        Snackbar.Add($"No se pudo actualizar el stock de los productos del detalle del carro.", Severity.Error);
                                                        break;
                                                    }
                                                }
                                                else
                                                {
                                                    Snackbar.Add($"No se pudo actualizar el comprobante del recibo por un error. Se descontinua la operación.", Severity.Error);
                                                    break;
                                                }
                                            }
                                            else
                                            {
                                                Snackbar.Add($"No se pudo insertar el detalle del recibo por un error.", Severity.Error);
                                                break;
                                            }
                                        }     

                                        //Navego a la pagina de inicio
                                        NavigationManager.NavigateTo("/detallesRecibo", forceLoad: true);
                                    }
                                    else Snackbar.Add($"No se pudo generar el recibo (encabezado). Error de inserción.", Severity.Error);
                                }
                                else
                                {
                                    //Ver cada comprobante, e irles restando a cada saldo restante correspondiente el importe del recibo hasta tanto sea 0, y en ese momento, actualizar dicho comprobante y pasar al siguiente, hasta tanto el importe del recibo sea 0, momento en el que dejo de actualizar los comprobantes aun si hubieran mas en cola
                                    //Se va a tomar el ID del cliente del primer comprobante como referencia para guardar en el recibo, ya que pueden utilizarse de varias personas pero solo hay uno por recibo

                                    //Actualizo los datos del recibo
                                    recibo.IdCliente = comprobantesAgregados.First().ClienteComp;
                                    recibo.FechaRecibo = Convert.ToDateTime(fechaRecibo);
                                    recibo.FormaPago = formaPag;
                                    recibo.Tarjeta = tarjeta;
                                    recibo.NumTarjeta = numTarj;
                                    recibo.Observaciones = observ;
                                    recibo.UsuarioCrea = idUsAct;

                                    //Guardo el recibo para obtener su ID y usarlo en los detalles
                                    var idRec = await ServRecibo.CrearEncabRec(recibo);

                                    if (idRec > 0)
                                    {
                                        //Guardo el importe total del recibo para irlo restando de los comprobantes
                                        var saldoReciboRest = recibo.ImporteTotal;

                                        //Veo cada comprobante y le voy restando el importe restante del recibo
                                        foreach (var comp in comprobantesAgregados)
                                        {
                                            //En cada iteracion, se analiza si el saldo restante del recibo es mayor a 0, queriendo decir que todavia se puede quitar importe de los comprobantes siguientes
                                            if (saldoReciboRest > 0)
                                            {
                                                //Lo primero que hay es analizar si el saldo final que me da entre el importe del comprobante y lo que restaba del recibo, es mayor que 0. Si es mayor, quiere decir que el saldo del recibo no alcanza para cubrir la totalidad del comprobante por lo que solo se restara una parte del saldo restante de ese comprobante. En cambio si es =0 o <0 quiere decir que el saldo restante del recibo alcanza para cubrir el saldo restante del comprobante, y si queda mas saldo del recibo, se puede seguir restando a los siguientes comprobantes
                                                //             2500                6000 = -3500
                                                //             6000                2500 = 3500
                                                var saldo = comp.SaldoRestante - saldoReciboRest;

                                                if (saldo > 0)
                                                {
                                                    //Saldo positivo quiere decir que va a quedar un restante en el saldo pendiente dle comprobante
                                                    DetalleRecibo detalle = new DetalleRecibo();

                                                    detalle.IdComprobante = comp.IdEncab;
                                                    detalle.IdRecibo = idRec;
                                                    detalle.Importe = saldoReciboRest;

                                                    var detalleCreado = await ServDetRecibo.CrearDetalleRecibo(detalle);

                                                    //Si se inserta correctamente el detalle, continuo con el comprobante apropiado
                                                    if (detalleCreado)
                                                    {
                                                        //Se actualiza el comprobante correspondiente
                                                        comp.SaldoRestante -= saldoReciboRest;
                                                        comp.Pagado = false;

                                                        var compAct = await ServComp.ActualizarComprobante(comp);

                                                        if (compAct)
                                                            break;
                                                        else
                                                        {
                                                            Snackbar.Add($"No se pudo actualizar el comprobante del recibo por un error. Se descontinua la operación.", Severity.Error);
                                                            break;
                                                        }
                                                    }
                                                    else
                                                    {
                                                        Snackbar.Add($"No se pudo insertar el detalle del recibo por un error.", Severity.Error);
                                                        break;
                                                    }
                                                }
                                                else
                                                {
                                                    //Saldo negativo (quiere decir que queda saldo para seguir restando a los comprobantes siguientes)
                                                    //Actualizo el saldo restante (Obtengo el valor absoluto porque llegaria un valor negativo, indicando que todavia queda salgo para restar)
                                                    saldoReciboRest = Math.Abs(saldo);

                                                    DetalleRecibo detalle = new DetalleRecibo();

                                                    //Guardo los valores del detalle del recibo
                                                    detalle.IdComprobante = comp.IdEncab;
                                                    detalle.IdRecibo = idRec;
                                                    detalle.Importe = comp.SaldoRestante;

                                                    var detalleCreado = await ServDetRecibo.CrearDetalleRecibo(detalle);

                                                    //Si se inserta correctamente el detalle, continuo con el comprobante apropiado
                                                    if (detalleCreado)
                                                    {
                                                        //Se actualiza el comprobante correspondiente
                                                        comp.SaldoRestante = 0;
                                                        comp.Pagado = true;

                                                        var compAct = await ServComp.ActualizarComprobante(comp);

                                                        if (!compAct)
                                                        {
                                                            Snackbar.Add($"No se pudo actualizar el comprobante del recibo por un error. Se descontinua la operación.", Severity.Error);
                                                            break;
                                                        }

                                                        //Actualizo el carro (Orden compra) a estado Pagado
                                                        var ordenActual = await ServCarroCompra.ObtenerCarro(comp.Carro);
                                                        ordenActual.Pagado = true;
                                                        ordenActual.FechaPago = fechaRecibo;
                                                        ordenActual.MetodoPago = formaPag;

                                                        var ordenActualizada = await ServCarroCompra.GuardarCarro(ordenActual);
                                                        if(!ordenActualizada)
                                                        {
                                                            Snackbar.Add($"No se pudo actualizar la orden de compra a Pagada.", Severity.Error);
                                                            break;
                                                        }
                                                    }
                                                    else
                                                    {
                                                        Snackbar.Add($"No se pudo insertar el detalle del recibo por un error.", Severity.Error);
                                                        break;
                                                    }
                                                }
                                            }
                                            else break;
                                        }

                                        //Navego a la pagina de inicio
                                        NavigationManager.NavigateTo("/detallesRecibo", forceLoad: true);
                                    }
                                    else Snackbar.Add($"No se pudo generar el recibo (encabezado). Error de inserción.", Severity.Error);
                                }                          
                            }
                            else Snackbar.Add($"Operación Cancelada", Severity.Warning);
                        }
                        else Snackbar.Add($"El importe del recibo no puede superar la suma a ingresar de los comprobantes", Severity.Error);
                    }
                    else Snackbar.Add($"La forma de pago debe ser distinta de Sin Pagar", Severity.Error);
                }
                else Snackbar.Add($"La fecha es incorrecta", Severity.Error);
            }
            else Snackbar.Add($"El importe del recibo debe ser mayor a 0", Severity.Error);
        }
        else Snackbar.Add($"No se puede generar el recibo porque el listado de comprobantes es incorrecto", Severity.Error);
    }
}