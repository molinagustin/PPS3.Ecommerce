@page "/listaTiposVentas"
@inject IServTipoVenta ServTipoVta
@attribute [Authorize(Roles = "1")]

<MudText Align="Align.Center" Typo="Typo.h5">Listado de Tipos Ventas</MudText>

@if(tiposVta == null)
{
    <MudProgressLinear Color="Color.Primary" Striped="true" Indeterminate="true" Class="my-1"/>
}
else
{
    <MudTable Items="@tiposVta" Hover="true" Striped="true" FixedHeader="true" Filter="new Func<TipoVenta, bool>(FilterFunc)">
        <ToolBarContent>
            <MudText Typo="Typo.h6">Tipos de Ventas</MudText>
            <MudSpacer/>
            <MudTextField @bind-Value="nombreBuscar" Placeholder="Buscar" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"/>
        </ToolBarContent>
        <HeaderContent>
            <MudTh>Id Tipo Venta</MudTh>
            <MudTh>Tipo de Venta</MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd DataLabel="Id Tipo Venta">@context.IdTipoVta</MudTd>
            <MudTd DataLabel="Tipo de Venta">@context.TipoVta</MudTd>
        </RowTemplate>
        <PagerContent>
            <MudTablePager/>
        </PagerContent>
    </MudTable>
}

@code {
    IEnumerable<TipoVenta>? tiposVta;
    private string nombreBuscar = "";

    //Obtengo la lista de tipos ventas
    protected override async Task OnInitializedAsync() => tiposVta = await ServTipoVta.ObtenerTiposVentas();

    private bool FilterFunc(TipoVenta tipo)
    {
        if (string.IsNullOrWhiteSpace(nombreBuscar))
            return true;
        if (tipo.TipoVta.Contains(nombreBuscar, StringComparison.OrdinalIgnoreCase))
            return true;
        return false;
    }
}
