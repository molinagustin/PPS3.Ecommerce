@page "/detallesCotiz"
@inject IServEncabezadoPresupuesto ServEncabPres
@inject IServCuerpoPresupuesto ServCuerpoPres
@inject IServProducto ServProducto
@using Radzen.Blazor
@inject NavigationManager NavigationManager
@inject ISnackbar Snackbar /*Servicio para las notificaciones*/
@inject IJSRuntime JS /*JS Interop*/
@attribute [Authorize(Roles = "1, 2")]

<AuthorizeView Context="usCont">
    <input type="hidden" id="UsAct" value="@usCont.User.Claims.First().Value" />
</AuthorizeView>

<MudText Align="Align.Center" Typo="Typo.h5" Style="margin-bottom:30px;">Generar Nueva Cotización</MudText>

<MudButton StartIcon="@Icons.Material.Filled.ArrowBack" Color="Color.Primary" Variant="Variant.Outlined" Href="/listaCotizaciones" Size="Size.Small" Style="margin-bottom:10px">Volver</MudButton>

<MudGrid Justify="Justify.Center">
    <MudItem lg="10">
                            @*LISTADO DE PRODUCTOS*@
        @if(productosDisponibles == null)
        {
            <MudProgressLinear Color="Color.Primary" Striped="true" Indeterminate="true" Class="my-1"/>
        }
        else
        {
            <MudText Align="Align.Center" Typo="Typo.h6" Style="margin-bottom:10px;">Listado de Productos Disponibles</MudText>

            <RadzenGrid Data="@productosDisponibles" TItem="ProductoListado" RowSelect="@(args => prodSelect = args)" AllowFiltering="true" FilterCaseSensitivity="Radzen.FilterCaseSensitivity.CaseInsensitive" AllowPaging="true" PageSize="10" AllowSorting="true" Style="margin-bottom:10px;" AllowColumnResize="true">
                <Columns>
                    <RadzenGridColumn TItem="ProductoListado" Property="NombreProd" Title="Nombre Producto"></RadzenGridColumn>
                    <RadzenGridColumn TItem="ProductoListado" Property="Descripcion" Title="Descripción"></RadzenGridColumn>
                    <RadzenGridColumn TItem="ProductoListado" Property="DescRubro" Title="Rubro" Width="120px"></RadzenGridColumn>
                    <RadzenGridColumn TItem="ProductoListado" Property="DescripcionTipo" Title="Tipo Producto"></RadzenGridColumn>
                    <RadzenGridColumn TItem="ProductoListado" Property="PrecioFinal" Title="Precio Venta" Width="130px">
                        <Template Context="pVta">
                            @string.Format(new System.Globalization.CultureInfo("es-AR"), "{0:C}", pVta.PrecioFinal)
                        </Template>
                    </RadzenGridColumn>
                    <RadzenGridColumn TItem="ProductoListado" Property="DescripcionUnidad" Title="Unidad Medida" Width="130px"></RadzenGridColumn>
                    <RadzenGridColumn TItem="ProductoListado" Property="NombreProv" Title="Proveedor" Width="150px"></RadzenGridColumn>
                    <RadzenGridColumn TItem="ProductoListado" Property="StockExistencia" Title="Stock" Width="100px"></RadzenGridColumn>
                </Columns>
            </RadzenGrid>
        }
    </MudItem>
    <MudItem xs="2">
        <MudText Align="Align.Center" Typo="Typo.h6" Style="margin-bottom:10px;"><br /></MudText>

        <MudStack Row="true" Justify="Justify.Center">
            <MudStack Style="width:50%">
                <label for="cant">Cantidad</label>
                <input @bind-value="strCant" @onkeydown="ProcessKeyPress" @onkeydown:preventDefault class="form-control" required="true" @onblur="@(() => Procesar(1, ref strCant))" @onfocus="@(() => focusControl = 1)" name="cant" style="margin-bottom:10px;">
                @*<MudTextField Label="Cantidad" HelperText="Formato 9,99 ó 9" @bind-Value="cant"/>*@
            </MudStack>
            <MudStack>
                <label for="bonif">% Bonificación</label>
                <input @bind-value="strBon" @onkeydown="ProcessKeyPress" @onkeydown:preventDefault class="form-control" required="true" @onblur="@(() => Procesar(2, ref strBon))" @onfocus="@(() => focusControl = 2)" name="bonif" style="margin-bottom:10px;">
                @*<MudTextField Label="% Bonificacion" HelperText="Formato 9,99 ó 9" @bind-Value="bonif"/>*@
            </MudStack>
        </MudStack>
        <MudStack Justify="Justify.Center">
            <MudButton StartIcon="@Icons.Material.Filled.AddCircle" Color="Color.Primary" Variant="Variant.Outlined" OnClick="AgregarProducto">Agregar Producto</MudButton>
        </MudStack>    
    </MudItem>
</MudGrid>

<MudText Align="Align.Center" Typo="Typo.h6">Detalles de la Cotización</MudText>

@if(productosAgregados != null && productosAgregados.Count() > 0)
{    
    <MudGrid Justify="Justify.Center">
        <MudItem lg="10">
            <MudSimpleTable Striped="true">
                <thead>
                    <tr>
                        <td>Nombre Producto</td>
                        <td>Descripción</td>
                        <td>Unidad Medida</td>
                        <td>Precio Venta</td>
                        <td>Cantidad</td>
                        <td>% Bonificación</td>
                        <td>Bonificación Total</td>
                        <td>Sub Total</td>
                        <td></td>
                    </tr>
                </thead>
                <tbody>
                    @foreach(var pr in productosAgregados)
                    {
                        <tr>
                            <td>@pr.NombreProd</td>
                            <td>@pr.Descripcion</td>
                            <td>@pr.DescripcionUnidad</td>
                            <td>@string.Format(new System.Globalization.CultureInfo("es-AR"), "{0:C}", pr.PrecioFinal)</td>
                            <td>@pr.Cantidad</td>
                            <td>@pr.Bonificacion %</td>
                            <td>@string.Format(new System.Globalization.CultureInfo("es-AR"), "{0:C}", pr.BonificacionTotal)</td>
                            <td>@string.Format(new System.Globalization.CultureInfo("es-AR"), "{0:C}", pr.SubTotal)</td>
                            <td><MudIconButton Icon="@Icons.Material.Filled.RemoveCircle" OnClick="@(e => RemoverProducto(pr.IdProducto))" Color="Color.Error"/></td>
                        </tr>
                    }
                    <tr>
                        <td></td>
                        <td></td>
                        <td></td>
                        <td></td>
                        <td></td>
                        <td></td>
                        <td></td>
                        <td>TOTAL:</td>
                        <td><b>@string.Format(new System.Globalization.CultureInfo("es-AR"), "{0:C}", productosAgregados.Sum(s => s.SubTotal))</b></td>
                    </tr>
                </tbody>
            </MudSimpleTable>
        </MudItem>
        <MudItem xs="2">
            <MudStack Justify="Justify.Center">
                <MudStack>
                    <MudTextField T="string" Label="Observaciones" Variant="Variant.Outlined" @bind-Value="observ" Lines="5" />
                    <MudTextField T="string" Label="Cliente" Variant="Variant.Outlined" @bind-Value="cliente" Required=true/>
                </MudStack>
                <MudStack>
                    <MudButton StartIcon="@Icons.Material.Filled.Done" Color="Color.Success" Variant="Variant.Outlined" OnClick="GenerarPresupuesto">Generar Cotización</MudButton>
                </MudStack>
            </MudStack>
        </MudItem>
    </MudGrid>
}
else
{
    <MudText Align="Align.Center" Typo="Typo.h6" Color="Color.Error">Todavía no se agrego ningún producto</MudText>
}

@code {
    //PARA MOSTRAR LOS PRODUCTOS Y BUSCARLOS
    IEnumerable<ProductoListado> productosDisponibles;
    List<ProductoListado>? productosAgregados;
    ProductoListado? prodSelect;

    //Para completar el formulario
    private decimal cant = 1;
    private decimal bonif = 0;
    private string observ = "";
    private string cliente = "";
    private string strBon = "0";
    private string strCant = "1";
    private int focusControl = 0;

    //Para almacenar el ID del usuario actual
    private int idUsAct;

    protected override async Task OnInitializedAsync()
    {
        productosDisponibles = await ServProducto.ObtenerProductos();
        productosAgregados = new List<ProductoListado>();
    }    

    //Guardo el ID del usuario actual
    protected override async Task OnAfterRenderAsync(bool firstRender) => idUsAct = Convert.ToInt32(await JS.InvokeAsync<string>("getUserId"));    

    private void Procesar(int tipo, ref string strProces)
    {
        if (string.IsNullOrEmpty(strProces.Trim()))
        {
            if (tipo == 1) strProces = "1";
            else strProces = "0";            
        } 
        if (strProces.Trim().StartsWith(',')) strProces = "0" + strProces;
        if (strProces.Contains(','))
        {
            var index = strProces.IndexOf(',');
            try { strProces = strProces.Substring(0, index + 3); }
            catch (Exception) { strProces = strProces.Remove(index); }
        }

        //1-Cantidad 2-Bonificacion
        switch (tipo)
        {
            case 1:
                cant = Convert.ToDecimal(strProces);
                strProces = cant.ToString();
                break;

            case 2:
                bonif = Convert.ToDecimal(strProces);
                strProces = bonif.ToString();
                if (bonif > 100)
                {
                    strProces = "100";
                    bonif = 100;
                }
                break;
        }

    }

    private static bool IsNumeric(string caracter)
    {
        int result;
        return int.TryParse(caracter, out result);
    }

    //Declaro una pila (ultimo en entrar primero en salir) Dejo la pila o cola porque es mas facil acceder a los elementos
    private Queue<Object> dato = new();

    private void ProcessKeyPress(KeyboardEventArgs e)
    {
        switch (focusControl)
        {
            case 1:
                ProcesoUnitario(ref strCant);
                break;

            case 2:
                ProcesoUnitario(ref strBon);
                break;
        }

        void ProcesoUnitario(ref string str)
        {
            dato.Clear();
            var back = false;
            foreach (var c in str)
                dato.Enqueue(c.ToString());

            switch (e.Key)
            {
                case ".":
                    if (!dato.Contains(","))
                        dato.Enqueue(",");
                    break;
                case ",":
                    if (!dato.Contains(","))
                        dato.Enqueue(",");
                    break;
                default:
                    if (IsNumeric(e.Key))
                        dato.Enqueue(e.Key);
                    if (e.Code == "Backspace" && dato.Count() > 0)
                        back = true;
                    break;
            }
            str = "";
            var can = back ? dato.Count - 1 : dato.Count;
            while (can > 0)
            {
                can--;
                str += dato.Dequeue();
            }
        }
    }

    protected void AgregarProducto()
    {
        if (prodSelect != null)
        {
            if(prodSelect.PrecioCosto == 0 || prodSelect.PrecioFinal == 0)
            {
                Snackbar.Add($"El producto elegido no puede tener precio 0", Severity.Error);
                return;
            }
            else if (prodSelect.StockExistencia == 0)
            {
                Snackbar.Add($"El producto elegido no posee stock en existencia", Severity.Error);
                return;
            }
            else if (cant > prodSelect.StockExistencia)
            {
                Snackbar.Add($"El producto elegido no contiene suficiente stock para la cantidad solicitada", Severity.Error);
                return;
            }

            if(cant > 0)
            {
                if(bonif >= 0 && bonif <= 100)
                {
                    //Verifico que el producto no se encuentre en la lista agregada
                    var prodYaAgregado = productosAgregados.Exists(a => a.IdProducto == prodSelect.IdProducto);
                    if (!prodYaAgregado)
                    {
                        //Realizo los calculos y asignaciones correspondientes
                        prodSelect.Cantidad = cant;
                        prodSelect.Bonificacion = bonif;
                        var precioTotCant = prodSelect.Cantidad * prodSelect.PrecioFinal;
                        var bonifUnit = (prodSelect.Bonificacion * prodSelect.PrecioFinal) / 100;
                        prodSelect.BonificacionTotal = bonifUnit * cant;
                        prodSelect.SubTotal = precioTotCant - prodSelect.BonificacionTotal;

                        //Agrego el producto al listado y reestablezco los controles
                        productosAgregados.Add(prodSelect);
                        prodSelect = null;
                        cant = 1;
                        strCant = "1";
                        bonif = 0;
                        strBon = "0";
                    }
                    else
                        Snackbar.Add($"El producto que intenta agregar, ya se encuentra en la cotización, debe seleccionar otro o bien remover el existente del listado.", Severity.Error);
                }
                else
                    Snackbar.Add($"Bonificación incorrecta", Severity.Error);                
            }
            else
                Snackbar.Add($"La cantidad debe ser mayor a 0", Severity.Error);
        }
        else
            Snackbar.Add($"Debe seleccionar el producto a agregar", Severity.Error);
    }

    protected string RemoverProducto(int id)
    {
        if(id > 0)
        {
            if(productosAgregados != null && productosAgregados.Count() > 1)
            {
                var producto = productosAgregados.Find(x => x.IdProducto == id);
                productosAgregados.Remove(producto);
                Snackbar.Add($"Producto Removido", Severity.Success);
            }
            else
                productosAgregados.Clear();
        }
        else
            Snackbar.Add($"Debe seleccionar el producto a remover", Severity.Error);
        return "";
    }

    private async Task GenerarPresupuesto()
    {
        if(productosAgregados != null && productosAgregados.Count() > 0)
        {
            if(!string.IsNullOrEmpty(cliente))
            {
                //Creo un objeto para el encabezado del presupuesto que sera lo primero a guardarse
                EncabezadoPresupuesto encab = new EncabezadoPresupuesto();
                encab.Cliente = cliente;
                if (string.IsNullOrEmpty(observ))
                    encab.Observaciones = "NINGUNA";
                else
                    encab.Observaciones = observ;
                encab.UsuarioCrea = idUsAct;
                //Guardo el encabezado y si me devuelve el valor correcto, prosigo con el resto de operaciones
                var numEncab = await ServEncabPres.CrearEncabezado(encab);

                if (numEncab > 0)
                {
                    //Al haberse creado el encabezado, se lo asigno a cada elemento a guardarse de la lista de detalles del presupuesto
                    //Voy a comprobar que se guarden todos los registros
                    var cantProd = productosAgregados.Count();
                    var cantProdGuard = 0;

                    foreach (var prod in productosAgregados)
                    {
                        var detalle = new CuerpoPresupuesto();
                        detalle.IdEncab = numEncab;
                        detalle.Producto = prod.IdProducto;
                        detalle.Cantidad = prod.Cantidad;
                        detalle.PrecioUnit = prod.PrecioFinal;
                        detalle.Bonificacion = prod.Bonificacion;
                        detalle.BonificacionTotal = prod.BonificacionTotal;
                        detalle.SubTotal = prod.SubTotal;

                        //Guardo cada registro del detalle
                        var detalleGuardado = await ServCuerpoPres.CrearCuerpo(detalle);
                        if (detalleGuardado)
                        {
                            cantProdGuard++;
                            continue;
                        }
                        else
                        {
                            Snackbar.Add($"No se pudo generar la cotización.", Severity.Error);
                            break;
                        }
                    }

                    if (cantProdGuard == cantProd)
                    {
                        //Si se guardaron todos los detalles de forma exitosa, navego hacia el listado de presupuestos
                        NavigationManager.NavigateTo("/listaCotizaciones");
                        Snackbar.Add($"Cotización Generada Correctamente", Severity.Success);
                    }
                    else
                        Snackbar.Add($"No se pudo generar la cotización", Severity.Error);
                }
                else
                    Snackbar.Add($"No se pudo generar la cotización", Severity.Error);
            }
            else
                Snackbar.Add($"El cliente es obligatorio", Severity.Error);
        }
        else
            Snackbar.Add($"No se puede generar la cotización porque el listado de productos es incorrecto", Severity.Error);
    }
}