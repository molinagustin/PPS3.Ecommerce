@page "/detallesOrdenesCompra/{id:int}"
@using Radzen.Blazor
@inject NavigationManager NavigationManager
@inject IServCarroCompra ServCarro
@inject IServEstadoCarroCompra ServEstadoCarro
@inject IServMovCarro ServMovCarro
@inject IServFormaPago ServFormaPago
@inject ISnackbar Snackbar /*Servicio para las notificaciones*/
@inject IJSRuntime JS /*JS Interop*/
@inject IDialogService DialogService
@attribute [Authorize(Roles = "1, 2")]

<AuthorizeView Context="usCont">
    <input type="hidden" id="UsAct" value="@usCont.User.Claims.First().Value" />
</AuthorizeView>

@if(ordenListado == null)
{
    <MudProgressLinear Color="Color.Primary" Striped="true" Indeterminate="true" Class="my-1"/>
}
else
{
    <MudText Align="Align.Center" Typo="Typo.h5" Style="margin-bottom:30px;">Detalles de la Orden de Compra N° <b>@ordenListado.IdCarro</b></MudText>

    <MudGrid Justify="Justify.Center" Style="margin-bottom:30px;">
        <MudItem lg="12">
            <MudSimpleTable Striped="true">
                <thead>
                    <tr>
                        <td>#</td>
                        <td>Nombre Producto</td>
                        <td>Cantidad</td>
                        <td>Unidad Medida</td>
                        <td>Precio Venta</td>
                        <td>% Bonificacion</td>
                        <td>Bonificacion Total</td>
                        <td>Sub Total</td>
                    </tr>
                </thead>
                <tbody>
                    @foreach(var od in ordenListado.DetallesCarro)
                    {
                        <tr>
                            <td>@(ordenListado.DetallesCarro.ToList().IndexOf(od) + 1)</td>
                            <td>
                                <RadzenImage Path="@od.UrlImagen" style="width: 40px; height: 40px; border-radius: 8px; margin-right: 8px; float: left;" />
                                <div style="margin-top:10px;">
                                    <a href="/verProducto/@od.Producto">@od.NombreProducto</a>
                                </div>                                
                            </td>
                            <td>@od.Cantidad</td>
                            <td>@od.DescripcionUnidad</td>
                            <td>@string.Format(new System.Globalization.CultureInfo("es-AR"), "{0:C}", od.PrecioUnit)</td>
                            <td>@od.Bonificacion %</td>
                            <td>@string.Format(new System.Globalization.CultureInfo("es-AR"), "{0:C}", od.BonificacionTotal)</td>
                            <td>@string.Format(new System.Globalization.CultureInfo("es-AR"), "{0:C}", od.SubTotal)</td>
                        </tr>
                    }
                    <tr>
                        <td></td>
                        <td></td>
                        <td></td>
                        <td></td>
                        <td></td>
                        <td></td>
                        <td></td>
                        <td>TOTAL: <b>@string.Format(new System.Globalization.CultureInfo("es-AR"), "{0:C}", ordenListado.Total)</b></td>
                    </tr>
                </tbody>
            </MudSimpleTable>
        </MudItem>
    </MudGrid>

    <MudGrid Justify="Justify.Center" Style="margin-bottom:30px;">
        <MudItem xs="4">
            <MudStack>
                <MudText Align="Align.Left" Typo="Typo.body1">Solicitado por: <b>@ordenListado.UsuarioCrea</b></MudText>
            </MudStack>
            <MudStack>
                <MudText Align="Align.Left" Typo="Typo.body1">Fecha de Orden: <b>@ordenListado.FechaOrden</b></MudText>
            </MudStack>
            <MudStack>
                <MudText Align="Align.Left" Typo="Typo.body1">Ultima Modificacion: <b>@ordenListado.FechaUltModif</b></MudText>
            </MudStack>
        </MudItem>

        <MudItem xs="4">
            <MudStack>
                <MudSwitch @bind-Checked="pgdo" Label="Pagado" Color="Color.Success" ReadOnly="true" />
            </MudStack>

            @if (ordenListado.Pagado)
            {
                <MudStack>
                    <MudText Align="Align.Left" Typo="Typo.body1">Fecha de Pago: <b>@string.Format("{0:d}", ordenListado.FechaPago)</b></MudText>
                </MudStack>
                <MudStack>
                    <MudText Align="Align.Left" Typo="Typo.body1">Forma de Pago: <b>@ordenListado.FormaP</b></MudText>
                </MudStack>
            }                      
        </MudItem>

        <MudItem xs="4">
            <MudStack>
                @if(ordenListado.Estado == "Cancelado" || ordenListado.Estado == "Finalizado")
                {
                    <MudDatePicker Label="Fecha de Entrega" @bind-Date="ordenListado.FechaEntrega" Placeholder="Seleccionar Fecha" ReadOnly="true"/>
                }
                else
                {
                    <MudDatePicker Label="Fecha de Entrega" @bind-Date="ordenListado.FechaEntrega" Placeholder="Seleccionar Fecha" />
                }                
            </MudStack>
        </MudItem>
    </MudGrid>

    <MudGrid Justify="Justify.Center" Style="margin-bottom:30px;">
        <MudItem xs="6">
            @if (ordenListado.Estado == "Cancelado" || ordenListado.Estado == "Finalizado")
            {
                <MudTextField T="string" Label="Observaciones" Variant="Variant.Outlined" @bind-Value="ordenListado.Observaciones" Lines="5" ReadOnly=true/>
            }
            else
            {
                <MudTextField T="string" Label="Observaciones" Variant="Variant.Outlined" @bind-Value="ordenListado.Observaciones" Lines="5" />
            }            
        </MudItem>

        <MudItem xs="2">
            @if(estados == null)
            {
                <MudProgressLinear Color="Color.Primary" Striped="true" Indeterminate="true" Class="my-1"/>
            }
            else
            {
                @if(ordenListado.Estado == "Cancelado" || ordenListado.Estado == "Finalizado")
                {
                    <MudSelect T="int" @bind-Value="@estado" Label="Estado Orden" Variant="Variant.Outlined" AnchorOrigin="Origin.BottomCenter" ReadOnly="true">
                        @foreach(var es in estados)
                        {
                            <MudSelectItem Value="@es.IdEstado">@(estados.ToList().IndexOf(es) + 1) - @es.Estado</MudSelectItem>
                        }
                    </MudSelect>
                }
                else
                {
                    <MudSelect T="int" @bind-Value="@estado" Label="Estado Orden" Variant="Variant.Outlined" AnchorOrigin="Origin.BottomCenter">
                        @foreach(var es in estados)
                        {
                            <MudSelectItem Value="@es.IdEstado">@(estados.ToList().IndexOf(es) + 1) - @es.Estado</MudSelectItem>
                        }
                    </MudSelect>
                }
            }
        </MudItem>

        <MudItem xs="4">
            <MudStack Style="margin-bottom:10px;">
                @if(ordenListado.Estado == "Cancelado" || ordenListado.Estado == "Finalizado")
                {
                    <MudButton StartIcon="@Icons.Material.Filled.Done" Color="Color.Success" Variant="Variant.Outlined" OnClick="GuardarOrden" Disabled="true">Guardar</MudButton>
                }
                else
                {
                    <MudButton StartIcon="@Icons.Material.Filled.Done" Color="Color.Success" Variant="Variant.Outlined" OnClick="GuardarOrden">Guardar</MudButton>
                }
            </MudStack>
            <MudStack>
                <MudButton StartIcon="@Icons.Material.Filled.ArrowBack" Color="Color.Default" Variant="Variant.Outlined" OnClick="Cancelar">Cancelar</MudButton>
            </MudStack>
        </MudItem>
    </MudGrid>

    <MudGrid Justify="Justify.Center">
        <MudItem xs="4"></MudItem>
        <MudItem xs="4">
            <MudText Align="Align.Left" Typo="Typo.body1">Historial de Movimientos:</MudText>
            @if (historial != null && historial.Count() > 0)
            {
                @foreach (var hist in historial)
                {
                    <MudText Align="Align.Left" Typo="Typo.body1">
                        <b>@(historial.ToList().IndexOf(hist) + 1)°</b> 
                        <b>Fecha:</b> @hist.FechaUltModif ||
                        <b>Estado:</b> @hist.Estado ||
                        <b>Usuario Modif.:</b> @hist.Usuario
                    </MudText>
                }
            }
            else
            {
                <MudText Align="Align.Center" Typo="Typo.body1" Color="Color.Info"><b>SIN MOVIMIENTOS</b></MudText>
            }
        </MudItem>
        <MudItem xs="4"></MudItem>        
    </MudGrid>
}

@code {
    //Parametro que se recibe por URL para una consulta del objeto
    [Parameter]
    public int id { get; set; }

    //Para almacenar el ID del usuario actual
    private int idUsAct;
    private int formaP;
    private int estado;
    private bool pgdo;

    //Para guardar la orden solicitada
    OrdenesCompraListado ordenListado;
    CarroCompra carro;

    IEnumerable<FormaPago> formaPago;
    IEnumerable<EstadoCarroCompra> estados;
    IEnumerable<HistorialMovimientoCarro> historial;

    //Guardo el ID del usuario actual
    protected override async Task OnAfterRenderAsync(bool firstRender) => idUsAct = Convert.ToInt32(await JS.InvokeAsync<string>("getUserId")); 

    protected override async Task OnInitializedAsync()
    {
        //Busco la orden de compra, ademas de los elementos para los selectores de Forma Pago y Estado Carro
        ordenListado = await ServCarro.ObtenerOCDetalle(id);
        formaPago = await ServFormaPago.ObtenerFormasPago();
        estados = await ServEstadoCarro.ObtenerEstados();
        estados = estados.Where(e => e.IdEstado > 1);
        historial = await ServMovCarro.ObtenerHistorial(id);

        //Obtengo el carro por si necesito actualizar datos
        carro = await ServCarro.ObtenerCarro(id);

        //Asigno las formas de pago y estado de la orden
        estado = estados.FirstOrDefault(e => e.Estado == ordenListado.Estado).IdEstado;
        if(formaPago.FirstOrDefault(f => f.FormaP == ordenListado.FormaP) != null)
            formaP = formaPago.FirstOrDefault(f => f.FormaP == ordenListado.FormaP).IdFormaP;
        else
            formaP = 1;

        pgdo = ordenListado.Pagado;
    }

    private async Task GuardarOrden()
    {
        //Si la orden va a ser CANCELADA o FINALIZADA, alerto al usuario
        if (estado == 4 || estado == 5)
        {
            var options = new DialogOptions { CloseOnEscapeKey = true };
            var dialog = DialogService.Show<DialogModifyOrder>("Confirmar Modificación", options);
            var result = await dialog.Result;

            if (!result.Cancelled) await ModificarOrden();
            else Snackbar.Add($"Se cancela la modificación", Severity.Warning);
        }
        else await ModificarOrden();        
    }

    private void Cancelar() => NavigationManager.NavigateTo("/listaOrdenesCompra");

    private async Task ModificarOrden()
    {
        //Asigno los valores cambiados al carro
        carro.Estado = estado;       

        if (ordenListado.FechaEntrega != null) carro.FechaEntrega = Convert.ToDateTime(ordenListado.FechaEntrega);
        else carro.FechaEntrega = null;

        if (!string.IsNullOrEmpty(ordenListado.Observaciones)) carro.Observaciones = ordenListado.Observaciones.Trim();

        //Procedo a guardar los cambios
        var result = await ServCarro.GuardarCarro(carro);
        if (result)
        {
            //Creo el movimiento del carro de compra
            MovimientoCarroCompra movimiento = new MovimientoCarroCompra();
            movimiento.IdOrden = id;
            movimiento.IdEstado = estado; // Pendiente
            movimiento.Usuario = idUsAct;

            var movimientoCreado = await ServMovCarro.CrearMovimiento(movimiento);
            if (!movimientoCreado) Snackbar.Add($"No se creo el movimiento", Severity.Error);

            NavigationManager.NavigateTo("/listaOrdenesCompra");
            Snackbar.Add($"Orden de compra N° {ordenListado.IdCarro} modificada exitosamente", Severity.Success);
        }
        else Snackbar.Add($"No se pudo modificar la Orden de Compra", Severity.Error);
    }
}
