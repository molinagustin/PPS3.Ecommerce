@page "/repStockProd"
@using Radzen.Blazor
@inject IServReporte servReporte
@inject ISnackbar Snackbar /*Servicio para las notificaciones*/
@inject Microsoft.AspNetCore.Hosting.IWebHostEnvironment env
@inject IJSRuntime JS /*JS Interop*/
@attribute [Authorize(Roles = "1, 2")]

<MudText Align="Align.Center" Typo="Typo.h5" Style="margin-bottom:30px;">Reporte de Stock</MudText>

<MudGrid>
    <MudItem xs="2">
        <MudSelect T="int" @bind-Value="parametros.Top" Label="Cantidad Productos" Variant="Variant.Outlined" AnchorOrigin="Origin.BottomCenter" Immediate=true>
            @foreach (var top in tops)
            {
                <MudSelectItem Value="top">@top</MudSelectItem>
            }
        </MudSelect>
    </MudItem>

    <MudItem xs="1">
        <MudButton StartIcon="@Icons.Material.Filled.AdsClick" Color="Color.Primary" Variant="Variant.Filled" OnClick="ObtenerStock">Generar</MudButton>        
    </MudItem>

    <MudItem xs="1">
        @if (stockProds.Count() > 0)
        {
            <MudButton StartIcon="@Icons.Material.Filled.Print" Color="Color.Primary" Variant="Variant.Outlined" OnClick="ImprimirReporte">Imprimir</MudButton>
        }
    </MudItem>
</MudGrid>

@if(stockProds.Count() > 0)
{
    <RadzenChart Style="height:600px;">
        <RadzenBarSeries Data="stockProds" CategoryProperty="NombreProd" Title="Stock" ValueProperty="StockExistencia" LineType="LineType.Dashed" />
        <RadzenBarOptions Radius="5" />
        <RadzenValueAxis>
            <RadzenGridLines Visible="true" />
        </RadzenValueAxis>
    </RadzenChart>
}
else if (generando)
{
    <MudProgressLinear Color="Color.Primary" Striped="true" Indeterminate="true" Class="my-1" />
}

@code {
    Parametros parametros = new Parametros();
    IEnumerable<StockProd> stockProds = new List<StockProd>();
    bool generando = false;
    int[] tops = new int[6] {5,10,15,20,25,30};

    protected async void ObtenerStock()
    {
        generando = true;
        stockProds = new List<StockProd>();
        var result = await servReporte.ReporteStockProductos(parametros);

        if (result != null) stockProds = result;
        else Snackbar.Add($"No se encontraron resultados para el reporte.", Severity.Error);

        generando = false;
        StateHasChanged();
    }

    protected void ImprimirReporte()
    {
        @if (stockProds.Count() > 0)
        {
            var pdf = new pdfPrinter(env);
            var result = pdf.DescargarPDF(JS, 4, stockProds);

            if (result.Length != 0) Snackbar.Add(result, Severity.Error);
            else Snackbar.Add($"Reporte impreso correctamente.", Severity.Success);
        }
        else Snackbar.Add($"El reporte a imprimir no es correcto.", Severity.Error);
    }
}